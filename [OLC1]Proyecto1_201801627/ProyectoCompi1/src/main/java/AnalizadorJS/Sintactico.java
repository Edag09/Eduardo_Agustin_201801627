
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorJS;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\354\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\002\012\000\002\002\007\000\002\002\007" +
    "\000\002\002\007\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\006\000\002\002\006\000\002" +
    "\002\006\000\002\002\007\000\002\002\010\000\002\002" +
    "\011\000\002\002\006\000\002\002\006\000\002\002\006" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\004\003\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\005\004\000\002\005\003\000\002\005\004\000\002\005" +
    "\003\000\002\005\007\000\002\005\006\000\002\005\006" +
    "\000\002\005\005\000\002\005\007\000\002\005\006\000" +
    "\002\005\005\000\002\005\006\000\002\016\005\000\002" +
    "\016\005\000\002\016\007\000\002\016\003\000\002\016" +
    "\003\000\002\016\005\000\002\003\011\000\002\003\012" +
    "\000\002\003\007\000\002\003\007\000\002\003\007\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\012\000\002\003\016\000\002\003\022\000\002\003\014" +
    "\000\002\003\012\000\002\003\013\000\002\003\012\000" +
    "\002\003\010\000\002\003\006\000\002\003\006\000\002" +
    "\003\011\000\002\003\010\000\002\003\012\000\002\003" +
    "\011\000\002\003\010\000\002\003\007\000\002\003\010" +
    "\000\002\003\011\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\011\000\002\003\015\000\002\003\021" +
    "\000\002\003\013\000\002\003\011\000\002\003\012\000" +
    "\002\003\011\000\002\003\007\000\002\003\006\000\002" +
    "\003\005\000\002\003\005\000\002\003\010\000\002\003" +
    "\007\000\002\003\011\000\002\003\010\000\002\003\007" +
    "\000\002\003\006\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\012\005\000" +
    "\002\012\004\000\002\013\006\000\002\013\006\000\002" +
    "\013\006\000\002\013\006\000\002\013\006\000\002\013" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\013\006\000\002\013\006\000" +
    "\002\014\004\000\002\014\004\000\002\014\006\000\002" +
    "\014\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\005\000\002\011\006\000\002\011" +
    "\010\000\002\011\010\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\004\000\002\011\005" +
    "\000\002\011\007\000\002\011\007\000\002\015\011\000" +
    "\002\015\010\000\002\015\006\000\002\015\011\000\002" +
    "\015\010\000\002\015\007\000\002\015\005\000\002\015" +
    "\010\000\002\006\005\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\004\000" +
    "\002\006\006\000\002\006\005\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u022e\000\014\004\006\010\010\013\007\014\011\015" +
    "\004\001\002\000\004\004\u022d\001\002\000\016\002\u0210" +
    "\004\u020e\010\u0211\013\u020f\014\u0212\015\u020d\001\002\000" +
    "\004\037\u0203\001\002\000\004\004\u01ff\001\002\000\004" +
    "\004\122\001\002\000\004\004\012\001\002\000\022\002" +
    "\uffed\004\uffed\010\uffed\013\uffed\014\uffed\015\uffed\027\014" +
    "\047\013\001\002\000\022\005\020\006\024\007\025\012" +
    "\021\035\022\037\023\063\015\064\016\001\002\000\016" +
    "\002\uffea\004\uffea\010\uffea\013\uffea\014\uffea\015\uffea\001" +
    "\002\000\044\002\uffda\004\uffda\010\uffda\011\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\121\034\uffda\001\002" +
    "\000\044\002\uffd8\004\uffd8\010\uffd8\011\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\120\034\uffd8\001\002\000" +
    "\016\002\ufff0\004\ufff0\010\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\001\002\000\044\002\uffe0\004\uffe0\010\uffe0\011\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\117\034\uffe0\001" +
    "\002\000\004\037\113\001\002\000\010\005\075\007\100" +
    "\035\077\001\002\000\006\007\032\037\031\001\002\000" +
    "\044\002\uffde\004\uffde\010\uffde\011\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\027\034\uffde\001\002\000\044" +
    "\002\uffdc\004\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\026\034\uffdc\001\002\000\042\002" +
    "\uffdd\004\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\034\uffdd\001\002\000\042\002\uffdf\004\uffdf" +
    "\010\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\034\uffdf\001\002\000\010\007\052\037\051\040\071\001" +
    "\002\000\006\007\032\037\031\001\002\000\016\041\040" +
    "\042\037\043\035\044\034\045\036\046\033\001\002\000" +
    "\004\007\046\001\002\000\004\007\045\001\002\000\004" +
    "\007\044\001\002\000\004\007\043\001\002\000\004\007" +
    "\042\001\002\000\004\007\041\001\002\000\066\002\uff17" +
    "\004\uff17\007\uff17\010\uff17\011\uff17\013\uff17\014\uff17\015" +
    "\uff17\016\uff17\020\uff17\021\uff17\022\uff17\023\uff17\024\uff17" +
    "\025\uff17\026\uff17\027\uff17\032\uff17\034\uff17\037\uff17\040" +
    "\uff17\041\uff17\042\uff17\043\uff17\044\uff17\045\uff17\001\002" +
    "\000\066\002\uff16\004\uff16\007\uff16\010\uff16\011\uff16\013" +
    "\uff16\014\uff16\015\uff16\016\uff16\020\uff16\021\uff16\022\uff16" +
    "\023\uff16\024\uff16\025\uff16\026\uff16\027\uff16\032\uff16\034" +
    "\uff16\037\uff16\040\uff16\041\uff16\042\uff16\043\uff16\044\uff16" +
    "\045\uff16\001\002\000\066\002\uff1b\004\uff1b\007\uff1b\010" +
    "\uff1b\011\uff1b\013\uff1b\014\uff1b\015\uff1b\016\uff1b\020\uff1b" +
    "\021\uff1b\022\uff1b\023\uff1b\024\uff1b\025\uff1b\026\uff1b\027" +
    "\uff1b\032\uff1b\034\uff1b\037\uff1b\040\uff1b\041\uff1b\042\uff1b" +
    "\043\uff1b\044\uff1b\045\uff1b\001\002\000\066\002\uff18\004" +
    "\uff18\007\uff18\010\uff18\011\uff18\013\uff18\014\uff18\015\uff18" +
    "\016\uff18\020\uff18\021\uff18\022\uff18\023\uff18\024\uff18\025" +
    "\uff18\026\uff18\027\uff18\032\uff18\034\uff18\037\uff18\040\uff18" +
    "\041\uff18\042\uff18\043\uff18\044\uff18\045\uff18\001\002\000" +
    "\066\002\uff1a\004\uff1a\007\uff1a\010\uff1a\011\uff1a\013\uff1a" +
    "\014\uff1a\015\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a\023" +
    "\uff1a\024\uff1a\025\uff1a\026\uff1a\027\uff1a\032\uff1a\034\uff1a" +
    "\037\uff1a\040\uff1a\041\uff1a\042\uff1a\043\uff1a\044\uff1a\045" +
    "\uff1a\001\002\000\066\002\uff19\004\uff19\007\uff19\010\uff19" +
    "\011\uff19\013\uff19\014\uff19\015\uff19\016\uff19\020\uff19\021" +
    "\uff19\022\uff19\023\uff19\024\uff19\025\uff19\026\uff19\027\uff19" +
    "\032\uff19\034\uff19\037\uff19\040\uff19\041\uff19\042\uff19\043" +
    "\uff19\044\uff19\045\uff19\001\002\000\010\007\052\037\051" +
    "\040\050\001\002\000\066\002\uff1c\004\uff1c\007\uff1c\010" +
    "\uff1c\011\uff1c\013\uff1c\014\uff1c\015\uff1c\016\uff1c\020\uff1c" +
    "\021\uff1c\022\uff1c\023\uff1c\024\uff1c\025\uff1c\026\uff1c\027" +
    "\uff1c\032\uff1c\034\uff1c\037\uff1c\040\uff1c\041\uff1c\042\uff1c" +
    "\043\uff1c\044\uff1c\045\uff1c\001\002\000\006\007\032\037" +
    "\031\001\002\000\016\041\060\042\057\043\054\044\055" +
    "\045\056\046\053\001\002\000\004\007\066\001\002\000" +
    "\004\007\065\001\002\000\004\007\064\001\002\000\004" +
    "\007\063\001\002\000\004\007\062\001\002\000\004\007" +
    "\061\001\002\000\066\002\uff1e\004\uff1e\007\uff1e\010\uff1e" +
    "\011\uff1e\013\uff1e\014\uff1e\015\uff1e\016\uff1e\020\uff1e\021" +
    "\uff1e\022\uff1e\023\uff1e\024\uff1e\025\uff1e\026\uff1e\027\uff1e" +
    "\032\uff1e\034\uff1e\037\uff1e\040\uff1e\041\uff1e\042\uff1e\043" +
    "\uff1e\044\uff1e\045\uff1e\001\002\000\066\002\uff1d\004\uff1d" +
    "\007\uff1d\010\uff1d\011\uff1d\013\uff1d\014\uff1d\015\uff1d\016" +
    "\uff1d\020\uff1d\021\uff1d\022\uff1d\023\uff1d\024\uff1d\025\uff1d" +
    "\026\uff1d\027\uff1d\032\uff1d\034\uff1d\037\uff1d\040\uff1d\041" +
    "\uff1d\042\uff1d\043\uff1d\044\uff1d\045\uff1d\001\002\000\066" +
    "\002\uff22\004\uff22\007\uff22\010\uff22\011\uff22\013\uff22\014" +
    "\uff22\015\uff22\016\uff22\020\uff22\021\uff22\022\uff22\023\uff22" +
    "\024\uff22\025\uff22\026\uff22\027\uff22\032\uff22\034\uff22\037" +
    "\uff22\040\uff22\041\uff22\042\uff22\043\uff22\044\uff22\045\uff22" +
    "\001\002\000\066\002\uff21\004\uff21\007\uff21\010\uff21\011" +
    "\uff21\013\uff21\014\uff21\015\uff21\016\uff21\020\uff21\021\uff21" +
    "\022\uff21\023\uff21\024\uff21\025\uff21\026\uff21\027\uff21\032" +
    "\uff21\034\uff21\037\uff21\040\uff21\041\uff21\042\uff21\043\uff21" +
    "\044\uff21\045\uff21\001\002\000\066\002\uff1f\004\uff1f\007" +
    "\uff1f\010\uff1f\011\uff1f\013\uff1f\014\uff1f\015\uff1f\016\uff1f" +
    "\020\uff1f\021\uff1f\022\uff1f\023\uff1f\024\uff1f\025\uff1f\026" +
    "\uff1f\027\uff1f\032\uff1f\034\uff1f\037\uff1f\040\uff1f\041\uff1f" +
    "\042\uff1f\043\uff1f\044\uff1f\045\uff1f\001\002\000\066\002" +
    "\uff20\004\uff20\007\uff20\010\uff20\011\uff20\013\uff20\014\uff20" +
    "\015\uff20\016\uff20\020\uff20\021\uff20\022\uff20\023\uff20\024" +
    "\uff20\025\uff20\026\uff20\027\uff20\032\uff20\034\uff20\037\uff20" +
    "\040\uff20\041\uff20\042\uff20\043\uff20\044\uff20\045\uff20\001" +
    "\002\000\010\007\052\037\051\040\070\001\002\000\066" +
    "\002\uff23\004\uff23\007\uff23\010\uff23\011\uff23\013\uff23\014" +
    "\uff23\015\uff23\016\uff23\020\uff23\021\uff23\022\uff23\023\uff23" +
    "\024\uff23\025\uff23\026\uff23\027\uff23\032\uff23\034\uff23\037" +
    "\uff23\040\uff23\041\uff23\042\uff23\043\uff23\044\uff23\045\uff23" +
    "\001\002\000\050\002\uffd4\004\uffd4\007\032\010\uffd4\011" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\073\034" +
    "\uffd4\037\031\001\002\000\050\002\uffd6\004\uffd6\007\052" +
    "\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\074\034\uffd6\037\051\001\002\000\042\002\uffd5\004" +
    "\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\034\uffd5\001\002\000\042\002\uffd7\004\uffd7\010\uffd7" +
    "\011\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\034\uffd7" +
    "\001\002\000\006\032\uffcc\036\uffcc\001\002\000\006\032" +
    "\103\036\111\001\002\000\010\005\075\007\100\035\077" +
    "\001\002\000\006\032\uffcb\036\uffcb\001\002\000\006\032" +
    "\103\036\102\001\002\000\006\032\uffca\036\uffca\001\002" +
    "\000\010\005\104\007\106\035\105\001\002\000\006\032" +
    "\uffcf\036\uffcf\001\002\000\010\005\075\007\100\035\077" +
    "\001\002\000\006\032\uffce\036\uffce\001\002\000\006\032" +
    "\103\036\110\001\002\000\006\032\uffcd\036\uffcd\001\002" +
    "\000\044\002\uffd1\004\uffd1\010\uffd1\011\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\112\034\uffd1\001\002\000" +
    "\042\002\uffd0\004\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\034\uffd0\001\002\000\004\005\114" +
    "\001\002\000\004\040\115\001\002\000\044\002\uffd2\004" +
    "\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\116\034\uffd2\001\002\000\042\002\uffd3\004\uffd3" +
    "\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\034\uffd3\001\002\000\042\002\uffe1\004\uffe1\010\uffe1\011" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\034\uffe1\001" +
    "\002\000\042\002\uffd9\004\uffd9\010\uffd9\011\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\034\uffd9\001\002\000\042" +
    "\002\uffdb\004\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\034\uffdb\001\002\000\004\033\123\001" +
    "\002\000\026\004\136\011\133\013\134\014\124\015\130" +
    "\016\126\020\132\021\131\022\127\023\135\001\002\000" +
    "\004\004\u01fb\001\002\000\030\004\161\011\154\013\157" +
    "\014\147\015\153\016\151\020\155\021\156\022\152\023" +
    "\160\034\u01fa\001\002\000\004\037\u01e9\001\002\000\004" +
    "\037\u01e1\001\002\000\004\004\u01dd\001\002\000\004\033" +
    "\u01d6\001\002\000\004\037\u01d0\001\002\000\004\037\u01cc" +
    "\001\002\000\004\004\u01c8\001\002\000\004\037\u01c2\001" +
    "\002\000\010\030\137\037\141\047\140\001\002\000\004" +
    "\004\u01bb\001\002\000\012\004\u01b9\005\213\006\215\007" +
    "\217\001\002\000\006\004\143\040\144\001\002\000\020" +
    "\032\174\040\u01b4\041\200\042\177\043\172\044\173\045" +
    "\175\001\002\000\020\032\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\001\002\000\004\033\145\001" +
    "\002\000\026\004\136\011\133\013\134\014\124\015\130" +
    "\016\126\020\132\021\131\022\127\023\135\001\002\000" +
    "\030\004\161\011\154\013\157\014\147\015\153\016\151" +
    "\020\155\021\156\022\152\023\160\034\150\001\002\000" +
    "\004\004\u01b0\001\002\000\036\004\uffae\011\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\034\uffae\001\002\000\004" +
    "\037\u019f\001\002\000\004\037\u0163\001\002\000\004\004" +
    "\u015f\001\002\000\004\037\u014a\001\002\000\004\037\u0144" +
    "\001\002\000\004\033\321\001\002\000\004\004\315\001" +
    "\002\000\004\037\247\001\002\000\010\030\162\037\164" +
    "\047\163\001\002\000\004\004\240\001\002\000\012\004" +
    "\214\005\213\006\215\007\217\001\002\000\006\004\143" +
    "\040\166\001\002\000\020\032\174\040\176\041\200\042" +
    "\177\043\172\044\173\045\175\001\002\000\004\033\167" +
    "\001\002\000\026\004\136\011\133\013\134\014\124\015" +
    "\130\016\126\020\132\021\131\022\127\023\135\001\002" +
    "\000\030\004\161\011\154\013\157\014\147\015\153\016" +
    "\151\020\155\021\156\022\152\023\160\034\171\001\002" +
    "\000\036\004\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\034\uffc9\001\002\000\006\007\032\037\031\001" +
    "\002\000\006\007\032\037\031\001\002\000\004\004\210" +
    "\001\002\000\006\007\032\037\031\001\002\000\042\004" +
    "\uffaf\011\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\204\033\203\034\uffaf\001\002\000\006\007\032\037\031" +
    "\001\002\000\006\007\032\037\031\001\002\000\024\007" +
    "\052\032\uffe6\037\051\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\001\002\000\024\007\052\032\uffe5\037" +
    "\051\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\001\002\000\026\004\136\011\133\013\134\014\124\015" +
    "\130\016\126\020\132\021\131\022\127\023\135\001\002" +
    "\000\036\004\uffb0\011\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\034\uffb0\001\002\000\030\004\161\011\154\013" +
    "\157\014\147\015\153\016\151\020\155\021\156\022\152" +
    "\023\160\034\206\001\002\000\036\004\uffc8\011\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\034\uffc8\001\002\000" +
    "\024\007\052\032\uffe2\037\051\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\001\002\000\020\032\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\001\002" +
    "\000\024\007\052\032\uffe3\037\051\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\001\002\000\024\007\052" +
    "\032\uffe4\037\051\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\001\002\000\004\041\236\001\002\000\040" +
    "\004\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\034\uffb6\041\231\001\002\000\004\041\227\001\002\000" +
    "\040\004\uffb5\011\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\034\uffb5\041\222\001\002\000\004\041\220\001\002" +
    "\000\004\004\221\001\002\000\040\004\uff8b\011\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\020\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\034\uff8b\041\uff8b\001" +
    "\002\000\012\004\224\005\223\006\225\007\226\001\002" +
    "\000\040\004\uff90\011\uff90\013\uff90\014\uff90\015\uff90\016" +
    "\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90" +
    "\026\uff90\034\uff90\041\uff90\001\002\000\040\004\uff92\011" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\020\uff92\021\uff92" +
    "\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\034\uff92\041" +
    "\uff92\001\002\000\040\004\uff8f\011\uff8f\013\uff8f\014\uff8f" +
    "\015\uff8f\016\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\034\uff8f\041\uff8f\001\002\000\040" +
    "\004\uff91\011\uff91\013\uff91\014\uff91\015\uff91\016\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91" +
    "\034\uff91\041\uff91\001\002\000\004\004\230\001\002\000" +
    "\040\004\uff89\011\uff89\013\uff89\014\uff89\015\uff89\016\uff89" +
    "\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026" +
    "\uff89\034\uff89\041\uff89\001\002\000\012\004\233\005\232" +
    "\006\234\007\235\001\002\000\040\004\uff8d\011\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\034\uff8d\041\uff8d\001" +
    "\002\000\040\004\uff88\011\uff88\013\uff88\014\uff88\015\uff88" +
    "\016\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\034\uff88\041\uff88\001\002\000\040\004\uff8c" +
    "\011\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\034\uff8c" +
    "\041\uff8c\001\002\000\040\004\uff8e\011\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\034\uff8e\041\uff8e\001\002\000" +
    "\004\004\237\001\002\000\040\004\uff8a\011\uff8a\013\uff8a" +
    "\014\uff8a\015\uff8a\016\uff8a\020\uff8a\021\uff8a\022\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\034\uff8a\041\uff8a\001\002" +
    "\000\004\037\241\001\002\000\006\004\143\040\243\001" +
    "\002\000\020\032\174\040\245\041\200\042\177\043\172" +
    "\044\173\045\175\001\002\000\040\004\uffb3\011\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\244\034\uffb3\001" +
    "\002\000\036\004\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\034\uffb1\001\002\000\040\004\uffb4\011\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\246\034\uffb4" +
    "\001\002\000\036\004\uffb2\011\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\034\uffb2\001\002\000\004\004\250\001" +
    "\002\000\004\040\251\001\002\000\004\033\252\001\002" +
    "\000\006\024\253\026\255\001\002\000\006\005\303\007" +
    "\304\001\002\000\010\024\263\026\264\034\262\001\002" +
    "\000\004\031\256\001\002\000\026\004\136\011\133\013" +
    "\134\014\124\015\130\016\126\020\132\021\131\022\127" +
    "\023\135\001\002\000\036\004\161\011\154\013\157\014" +
    "\147\015\153\016\151\020\155\021\156\022\152\023\160" +
    "\024\uff30\025\260\026\uff30\034\uff30\001\002\000\004\027" +
    "\261\001\002\000\010\024\uff31\026\uff31\034\uff31\001\002" +
    "\000\036\004\uffb8\011\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\034\uffb8\001\002\000\006\005\271\007\272\001" +
    "\002\000\004\031\265\001\002\000\026\004\136\011\133" +
    "\013\134\014\124\015\130\016\126\020\132\021\131\022" +
    "\127\023\135\001\002\000\036\004\161\011\154\013\157" +
    "\014\147\015\153\016\151\020\155\021\156\022\152\023" +
    "\160\024\uff34\025\267\026\uff34\034\uff34\001\002\000\004" +
    "\027\270\001\002\000\010\024\uff35\026\uff35\034\uff35\001" +
    "\002\000\004\031\277\001\002\000\004\031\273\001\002" +
    "\000\026\004\136\011\133\013\134\014\124\015\130\016" +
    "\126\020\132\021\131\022\127\023\135\001\002\000\030" +
    "\004\161\011\154\013\157\014\147\015\153\016\151\020" +
    "\155\021\156\022\152\023\160\025\275\001\002\000\004" +
    "\027\276\001\002\000\010\024\uff36\026\uff36\034\uff36\001" +
    "\002\000\026\004\136\011\133\013\134\014\124\015\130" +
    "\016\126\020\132\021\131\022\127\023\135\001\002\000" +
    "\030\004\161\011\154\013\157\014\147\015\153\016\151" +
    "\020\155\021\156\022\152\023\160\025\301\001\002\000" +
    "\004\027\302\001\002\000\010\024\uff33\026\uff33\034\uff33" +
    "\001\002\000\004\031\311\001\002\000\004\031\305\001" +
    "\002\000\026\004\136\011\133\013\134\014\124\015\130" +
    "\016\126\020\132\021\131\022\127\023\135\001\002\000" +
    "\030\004\161\011\154\013\157\014\147\015\153\016\151" +
    "\020\155\021\156\022\152\023\160\025\307\001\002\000" +
    "\004\027\310\001\002\000\010\024\uff32\026\uff32\034\uff32" +
    "\001\002\000\026\004\136\011\133\013\134\014\124\015" +
    "\130\016\126\020\132\021\131\022\127\023\135\001\002" +
    "\000\030\004\161\011\154\013\157\014\147\015\153\016" +
    "\151\020\155\021\156\022\152\023\160\025\313\001\002" +
    "\000\004\027\314\001\002\000\010\024\uff2f\026\uff2f\034" +
    "\uff2f\001\002\000\042\004\uffc4\011\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\317\034\uffc4\047\316\001\002" +
    "\000\022\005\020\006\024\007\025\012\021\035\022\037" +
    "\023\063\015\064\016\001\002\000\036\004\uffc1\011\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\034\uffc1\001\002" +
    "\000\036\004\uffc7\011\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\034\uffc7\001\002\000\026\004\136\011\133\013" +
    "\134\014\124\015\130\016\126\020\132\021\131\022\127" +
    "\023\135\001\002\000\030\004\161\011\154\013\157\014" +
    "\147\015\153\016\151\020\155\021\156\022\152\023\160" +
    "\034\323\001\002\000\004\020\324\001\002\000\004\037" +
    "\325\001\002\000\014\004\330\005\326\007\333\037\332" +
    "\062\327\001\002\000\006\052\u0141\053\u0140\001\002\000" +
    "\004\004\u013f\001\002\000\016\052\u0129\053\u0127\054\u012b" +
    "\055\u012c\056\u0128\057\u012a\001\002\000\016\004\354\005" +
    "\352\007\360\037\356\040\u0126\062\353\001\002\000\014" +
    "\004\330\005\326\007\333\037\332\062\327\001\002\000" +
    "\016\052\335\053\334\054\340\055\341\056\336\057\337" +
    "\001\002\000\004\007\347\001\002\000\004\007\346\001" +
    "\002\000\004\007\345\001\002\000\004\007\344\001\002" +
    "\000\004\007\343\001\002\000\004\007\342\001\002\000" +
    "\022\004\uff52\005\uff52\007\uff52\037\uff52\040\uff52\060\uff52" +
    "\061\uff52\062\uff52\001\002\000\022\004\uff51\005\uff51\007" +
    "\uff51\037\uff51\040\uff51\060\uff51\061\uff51\062\uff51\001\002" +
    "\000\022\004\uff50\005\uff50\007\uff50\037\uff50\040\uff50\060" +
    "\uff50\061\uff50\062\uff50\001\002\000\022\004\uff4f\005\uff4f" +
    "\007\uff4f\037\uff4f\040\uff4f\060\uff4f\061\uff4f\062\uff4f\001" +
    "\002\000\022\004\uff53\005\uff53\007\uff53\037\uff53\040\uff53" +
    "\060\uff53\061\uff53\062\uff53\001\002\000\022\004\uff41\005" +
    "\uff41\007\uff41\037\uff41\040\uff41\060\uff41\061\uff41\062\uff41" +
    "\001\002\000\022\004\354\005\352\007\360\037\356\040" +
    "\355\060\351\061\357\062\353\001\002\000\014\004\330" +
    "\005\326\007\333\037\332\062\327\001\002\000\006\052" +
    "\u0121\053\u0120\001\002\000\004\004\u011f\001\002\000\016" +
    "\052\u0108\053\u0107\054\u010b\055\u010c\056\u0109\057\u010a\001" +
    "\002\000\022\004\uff39\005\uff39\007\uff39\037\uff39\040\uff39" +
    "\060\uff39\061\uff39\062\uff39\001\002\000\014\004\330\005" +
    "\326\007\333\037\332\062\327\001\002\000\014\004\330" +
    "\005\326\007\333\037\332\062\327\001\002\000\016\052" +
    "\363\053\361\054\365\055\366\056\362\057\364\001\002" +
    "\000\004\007\374\001\002\000\004\007\373\001\002\000" +
    "\004\007\372\001\002\000\004\007\371\001\002\000\004" +
    "\007\370\001\002\000\004\007\367\001\002\000\022\004" +
    "\uff70\005\uff70\007\uff70\037\uff70\040\uff70\060\uff70\061\uff70" +
    "\062\uff70\001\002\000\022\004\uff6f\005\uff6f\007\uff6f\037" +
    "\uff6f\040\uff6f\060\uff6f\061\uff6f\062\uff6f\001\002\000\022" +
    "\004\uff6e\005\uff6e\007\uff6e\037\uff6e\040\uff6e\060\uff6e\061" +
    "\uff6e\062\uff6e\001\002\000\022\004\uff71\005\uff71\007\uff71" +
    "\037\uff71\040\uff71\060\uff71\061\uff71\062\uff71\001\002\000" +
    "\022\004\uff6d\005\uff6d\007\uff6d\037\uff6d\040\uff6d\060\uff6d" +
    "\061\uff6d\062\uff6d\001\002\000\022\004\uff5f\005\uff5f\007" +
    "\uff5f\037\uff5f\040\uff5f\060\uff5f\061\uff5f\062\uff5f\001\002" +
    "\000\016\004\354\005\352\007\360\037\356\040\376\062" +
    "\353\001\002\000\022\004\uff38\005\uff38\007\uff38\037\uff38" +
    "\040\uff38\060\uff38\061\uff38\062\uff38\001\002\000\022\004" +
    "\354\005\352\007\360\037\356\040\u0101\060\u0100\061\u0102" +
    "\062\353\001\002\000\014\004\330\005\326\007\333\037" +
    "\332\062\327\001\002\000\022\004\uff57\005\uff57\007\uff57" +
    "\037\uff57\040\uff57\060\uff57\061\uff57\062\uff57\001\002\000" +
    "\014\004\330\005\326\007\333\037\332\062\327\001\002" +
    "\000\016\004\354\005\352\007\360\037\356\040\u0104\062" +
    "\353\001\002\000\022\004\uff56\005\uff56\007\uff56\037\uff56" +
    "\040\uff56\060\uff56\061\uff56\062\uff56\001\002\000\016\004" +
    "\354\005\352\007\360\037\356\040\u0106\062\353\001\002" +
    "\000\022\004\uff55\005\uff55\007\uff55\037\uff55\040\uff55\060" +
    "\uff55\061\uff55\062\uff55\001\002\000\014\004\u011b\005\u011a" +
    "\007\u011d\063\u011e\064\u011c\001\002\000\014\004\u0116\005" +
    "\u0115\007\u0118\063\u0119\064\u0117\001\002\000\006\004\u0113" +
    "\007\u0114\001\002\000\006\004\u0111\007\u0112\001\002\000" +
    "\006\004\u010f\007\u0110\001\002\000\006\004\u010d\007\u010e" +
    "\001\002\000\022\004\uff64\005\uff64\007\uff64\037\uff64\040" +
    "\uff64\060\uff64\061\uff64\062\uff64\001\002\000\022\004\uff68" +
    "\005\uff68\007\uff68\037\uff68\040\uff68\060\uff68\061\uff68\062" +
    "\uff68\001\002\000\022\004\uff63\005\uff63\007\uff63\037\uff63" +
    "\040\uff63\060\uff63\061\uff63\062\uff63\001\002\000\022\004" +
    "\uff67\005\uff67\007\uff67\037\uff67\040\uff67\060\uff67\061\uff67" +
    "\062\uff67\001\002\000\022\004\uff62\005\uff62\007\uff62\037" +
    "\uff62\040\uff62\060\uff62\061\uff62\062\uff62\001\002\000\022" +
    "\004\uff66\005\uff66\007\uff66\037\uff66\040\uff66\060\uff66\061" +
    "\uff66\062\uff66\001\002\000\022\004\uff61\005\uff61\007\uff61" +
    "\037\uff61\040\uff61\060\uff61\061\uff61\062\uff61\001\002\000" +
    "\022\004\uff65\005\uff65\007\uff65\037\uff65\040\uff65\060\uff65" +
    "\061\uff65\062\uff65\001\002\000\022\004\uff69\005\uff69\007" +
    "\uff69\037\uff69\040\uff69\060\uff69\061\uff69\062\uff69\001\002" +
    "\000\022\004\uff60\005\uff60\007\uff60\037\uff60\040\uff60\060" +
    "\uff60\061\uff60\062\uff60\001\002\000\022\004\uff6a\005\uff6a" +
    "\007\uff6a\037\uff6a\040\uff6a\060\uff6a\061\uff6a\062\uff6a\001" +
    "\002\000\022\004\uff6c\005\uff6c\007\uff6c\037\uff6c\040\uff6c" +
    "\060\uff6c\061\uff6c\062\uff6c\001\002\000\022\004\uff6b\005" +
    "\uff6b\007\uff6b\037\uff6b\040\uff6b\060\uff6b\061\uff6b\062\uff6b" +
    "\001\002\000\022\004\uff5a\005\uff5a\007\uff5a\037\uff5a\040" +
    "\uff5a\060\uff5a\061\uff5a\062\uff5a\001\002\000\022\004\uff59" +
    "\005\uff59\007\uff59\037\uff59\040\uff59\060\uff59\061\uff59\062" +
    "\uff59\001\002\000\022\004\uff5b\005\uff5b\007\uff5b\037\uff5b" +
    "\040\uff5b\060\uff5b\061\uff5b\062\uff5b\001\002\000\022\004" +
    "\uff5d\005\uff5d\007\uff5d\037\uff5d\040\uff5d\060\uff5d\061\uff5d" +
    "\062\uff5d\001\002\000\022\004\uff5c\005\uff5c\007\uff5c\037" +
    "\uff5c\040\uff5c\060\uff5c\061\uff5c\062\uff5c\001\002\000\022" +
    "\004\uff58\005\uff58\007\uff58\037\uff58\040\uff58\060\uff58\061" +
    "\uff58\062\uff58\001\002\000\004\005\u0123\001\002\000\004" +
    "\005\u0122\001\002\000\022\004\uff72\005\uff72\007\uff72\037" +
    "\uff72\040\uff72\060\uff72\061\uff72\062\uff72\001\002\000\022" +
    "\004\uff5e\005\uff5e\007\uff5e\037\uff5e\040\uff5e\060\uff5e\061" +
    "\uff5e\062\uff5e\001\002\000\016\004\354\005\352\007\360" +
    "\037\356\040\u0125\062\353\001\002\000\022\004\uff37\005" +
    "\uff37\007\uff37\037\uff37\040\uff37\060\uff37\061\uff37\062\uff37" +
    "\001\002\000\036\004\uffb9\011\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\034\uffb9\001\002\000\014\004\u013b\005" +
    "\u013a\007\u013d\063\u013e\064\u013c\001\002\000\006\004\u0138" +
    "\007\u0139\001\002\000\014\004\u0134\005\u0133\007\u0136\063" +
    "\u0137\064\u0135\001\002\000\006\004\u0131\007\u0132\001\002" +
    "\000\006\004\u012f\007\u0130\001\002\000\006\004\u012d\007" +
    "\u012e\001\002\000\022\004\uff46\005\uff46\007\uff46\037\uff46" +
    "\040\uff46\060\uff46\061\uff46\062\uff46\001\002\000\022\004" +
    "\uff4a\005\uff4a\007\uff4a\037\uff4a\040\uff4a\060\uff4a\061\uff4a" +
    "\062\uff4a\001\002\000\022\004\uff45\005\uff45\007\uff45\037" +
    "\uff45\040\uff45\060\uff45\061\uff45\062\uff45\001\002\000\022" +
    "\004\uff49\005\uff49\007\uff49\037\uff49\040\uff49\060\uff49\061" +
    "\uff49\062\uff49\001\002\000\022\004\uff44\005\uff44\007\uff44" +
    "\037\uff44\040\uff44\060\uff44\061\uff44\062\uff44\001\002\000" +
    "\022\004\uff48\005\uff48\007\uff48\037\uff48\040\uff48\060\uff48" +
    "\061\uff48\062\uff48\001\002\000\022\004\uff4b\005\uff4b\007" +
    "\uff4b\037\uff4b\040\uff4b\060\uff4b\061\uff4b\062\uff4b\001\002" +
    "\000\022\004\uff42\005\uff42\007\uff42\037\uff42\040\uff42\060" +
    "\uff42\061\uff42\062\uff42\001\002\000\022\004\uff4c\005\uff4c" +
    "\007\uff4c\037\uff4c\040\uff4c\060\uff4c\061\uff4c\062\uff4c\001" +
    "\002\000\022\004\uff4e\005\uff4e\007\uff4e\037\uff4e\040\uff4e" +
    "\060\uff4e\061\uff4e\062\uff4e\001\002\000\022\004\uff4d\005" +
    "\uff4d\007\uff4d\037\uff4d\040\uff4d\060\uff4d\061\uff4d\062\uff4d" +
    "\001\002\000\022\004\uff43\005\uff43\007\uff43\037\uff43\040" +
    "\uff43\060\uff43\061\uff43\062\uff43\001\002\000\022\004\uff47" +
    "\005\uff47\007\uff47\037\uff47\040\uff47\060\uff47\061\uff47\062" +
    "\uff47\001\002\000\022\004\uff3c\005\uff3c\007\uff3c\037\uff3c" +
    "\040\uff3c\060\uff3c\061\uff3c\062\uff3c\001\002\000\022\004" +
    "\uff3b\005\uff3b\007\uff3b\037\uff3b\040\uff3b\060\uff3b\061\uff3b" +
    "\062\uff3b\001\002\000\022\004\uff3d\005\uff3d\007\uff3d\037" +
    "\uff3d\040\uff3d\060\uff3d\061\uff3d\062\uff3d\001\002\000\022" +
    "\004\uff3f\005\uff3f\007\uff3f\037\uff3f\040\uff3f\060\uff3f\061" +
    "\uff3f\062\uff3f\001\002\000\022\004\uff3e\005\uff3e\007\uff3e" +
    "\037\uff3e\040\uff3e\060\uff3e\061\uff3e\062\uff3e\001\002\000" +
    "\022\004\uff3a\005\uff3a\007\uff3a\037\uff3a\040\uff3a\060\uff3a" +
    "\061\uff3a\062\uff3a\001\002\000\004\005\u0143\001\002\000" +
    "\004\005\u0142\001\002\000\022\004\uff54\005\uff54\007\uff54" +
    "\037\uff54\040\uff54\060\uff54\061\uff54\062\uff54\001\002\000" +
    "\022\004\uff40\005\uff40\007\uff40\037\uff40\040\uff40\060\uff40" +
    "\061\uff40\062\uff40\001\002\000\014\004\330\005\326\007" +
    "\333\037\332\062\327\001\002\000\016\004\354\005\352" +
    "\007\360\037\356\040\u0146\062\353\001\002\000\004\033" +
    "\u0147\001\002\000\026\004\136\011\133\013\134\014\124" +
    "\015\130\016\126\020\132\021\131\022\127\023\135\001" +
    "\002\000\030\004\161\011\154\013\157\014\147\015\153" +
    "\016\151\020\155\021\156\022\152\023\160\034\u0149\001" +
    "\002\000\036\004\uffba\011\uffba\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\034\uffba\001\002\000\016\004\u014c\005\u014b" +
    "\007\u0150\037\u014f\042\u014e\062\u014d\001\002\000\006\040" +
    "\uff2c\041\uff2c\001\002\000\012\040\uff2b\041\uff2b\050\u015d" +
    "\051\u015e\001\002\000\004\004\u015c\001\002\000\006\007" +
    "\u0159\037\u0158\001\002\000\006\007\032\037\031\001\002" +
    "\000\006\040\uff2a\041\uff2a\001\002\000\006\040\u0152\041" +
    "\u0153\001\002\000\004\027\u0155\001\002\000\012\007\032" +
    "\037\031\040\uff2d\041\uff2d\001\002\000\012\007\052\037" +
    "\051\040\uff2e\041\uff2e\001\002\000\036\004\uffb7\011\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\034\uffb7\001\002" +
    "\000\010\007\052\037\051\040\u0157\001\002\000\006\040" +
    "\uff27\041\uff27\001\002\000\006\007\032\037\031\001\002" +
    "\000\006\040\uff29\041\uff29\001\002\000\010\007\052\037" +
    "\051\040\u015b\001\002\000\006\040\uff28\041\uff28\001\002" +
    "\000\006\040\uff24\041\uff24\001\002\000\006\040\uff26\041" +
    "\uff26\001\002\000\006\040\uff25\041\uff25\001\002\000\042" +
    "\004\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\u0161\034\uffc2\047\u0160\001\002\000\022\005\020\006" +
    "\024\007\025\012\021\035\022\037\023\063\015\064\016" +
    "\001\002\000\036\004\uffbf\011\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\034\uffbf\001\002\000\036\004\uffc5\011" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\034\uffc5\001" +
    "\002\000\010\004\u0165\013\u0166\014\u0167\001\002\000\004" +
    "\004\u0175\001\002\000\012\007\032\027\u0170\037\031\047" +
    "\u016f\001\002\000\004\004\u016b\001\002\000\004\004\u0168" +
    "\001\002\000\004\047\u0169\001\002\000\022\005\020\006" +
    "\024\007\025\012\021\035\022\037\023\063\015\064\016" +
    "\001\002\000\004\004\uff86\001\002\000\004\047\u016c\001" +
    "\002\000\022\005\020\006\024\007\025\012\021\035\022" +
    "\037\023\063\015\064\016\001\002\000\004\004\uff87\001" +
    "\002\000\010\007\052\027\u0173\037\051\001\002\000\004" +
    "\007\u0171\001\002\000\004\004\uff83\001\002\000\004\027" +
    "\u0172\001\002\000\004\004\uff85\001\002\000\004\004\uff84" +
    "\001\002\000\004\004\u0193\001\002\000\012\054\u0178\055" +
    "\u0179\056\u0176\057\u0177\001\002\000\010\004\u018d\007\u018e" +
    "\037\031\001\002\000\010\004\u0187\007\u0188\037\031\001" +
    "\002\000\010\004\u0181\007\u0182\037\031\001\002\000\010" +
    "\004\u017b\007\u017c\037\031\001\002\000\010\007\052\027" +
    "\u017f\037\051\001\002\000\004\027\u017e\001\002\000\020" +
    "\027\u017d\041\040\042\037\043\035\044\034\045\036\046" +
    "\033\001\002\000\004\004\uff7e\001\002\000\004\004\uff82" +
    "\001\002\000\004\004\uff7a\001\002\000\010\007\052\027" +
    "\u0185\037\051\001\002\000\004\027\u0184\001\002\000\020" +
    "\027\u0183\041\040\042\037\043\035\044\034\045\036\046" +
    "\033\001\002\000\004\004\uff7d\001\002\000\004\004\uff81" +
    "\001\002\000\004\004\uff79\001\002\000\010\007\052\027" +
    "\u018b\037\051\001\002\000\004\027\u018a\001\002\000\020" +
    "\027\u0189\041\040\042\037\043\035\044\034\045\036\046" +
    "\033\001\002\000\004\004\uff7c\001\002\000\004\004\uff80" +
    "\001\002\000\004\004\uff78\001\002\000\010\007\052\027" +
    "\u0191\037\051\001\002\000\004\027\u0190\001\002\000\020" +
    "\027\u018f\041\040\042\037\043\035\044\034\045\036\046" +
    "\033\001\002\000\004\004\uff7b\001\002\000\004\004\uff7f" +
    "\001\002\000\004\004\uff77\001\002\000\004\040\u019b\001" +
    "\002\000\010\047\u0195\050\u0194\051\u0196\001\002\000\004" +
    "\040\uff76\001\002\000\006\041\u0198\054\u0197\001\002\000" +
    "\004\040\uff75\001\002\000\004\007\u019a\001\002\000\004" +
    "\007\u0199\001\002\000\004\040\uff74\001\002\000\004\040" +
    "\uff73\001\002\000\004\033\u019c\001\002\000\026\004\136" +
    "\011\133\013\134\014\124\015\130\016\126\020\132\021" +
    "\131\022\127\023\135\001\002\000\030\004\161\011\154" +
    "\013\157\014\147\015\153\016\151\020\155\021\156\022" +
    "\152\023\160\034\u019e\001\002\000\036\004\uffbb\011\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\034\uffbb\001\002" +
    "\000\014\004\330\005\326\007\333\037\332\062\327\001" +
    "\002\000\016\004\354\005\352\007\360\037\356\040\u01a1" +
    "\062\353\001\002\000\004\033\u01a2\001\002\000\026\004" +
    "\136\011\133\013\134\014\124\015\130\016\126\020\132" +
    "\021\131\022\127\023\135\001\002\000\030\004\161\011" +
    "\154\013\157\014\147\015\153\016\151\020\155\021\156" +
    "\022\152\023\160\034\u01a4\001\002\000\040\004\uffbe\011" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\u01a5\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\034" +
    "\uffbe\001\002\000\006\016\u01a7\033\u01a6\001\002\000\026" +
    "\004\136\011\133\013\134\014\124\015\130\016\126\020" +
    "\132\021\131\022\127\023\135\001\002\000\004\037\u01a8" +
    "\001\002\000\014\004\330\005\326\007\333\037\332\062" +
    "\327\001\002\000\016\004\354\005\352\007\360\037\356" +
    "\040\u01aa\062\353\001\002\000\004\033\u01ab\001\002\000" +
    "\026\004\136\011\133\013\134\014\124\015\130\016\126" +
    "\020\132\021\131\022\127\023\135\001\002\000\030\004" +
    "\161\011\154\013\157\014\147\015\153\016\151\020\155" +
    "\021\156\022\152\023\160\034\u01ad\001\002\000\036\004" +
    "\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\034" +
    "\uffbc\001\002\000\030\004\161\011\154\013\157\014\147" +
    "\015\153\016\151\020\155\021\156\022\152\023\160\034" +
    "\u01af\001\002\000\036\004\uffbd\011\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\034\uffbd\001\002\000\042\004\uffc3" +
    "\011\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\u01b2" +
    "\034\uffc3\047\u01b1\001\002\000\022\005\020\006\024\007" +
    "\025\012\021\035\022\037\023\063\015\064\016\001\002" +
    "\000\036\004\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\034\uffc0\001\002\000\036\004\uffc6\011\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\034\uffc6\001\002\000" +
    "\042\004\uff93\011\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026" +
    "\uff93\027\u01b6\033\u01b5\034\uff93\001\002\000\026\004\136" +
    "\011\133\013\134\014\124\015\130\016\126\020\132\021" +
    "\131\022\127\023\135\001\002\000\036\004\uff94\011\uff94" +
    "\013\uff94\014\uff94\015\uff94\016\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\034\uff94\001\002" +
    "\000\030\004\161\011\154\013\157\014\147\015\153\016" +
    "\151\020\155\021\156\022\152\023\160\034\u01b8\001\002" +
    "\000\036\004\uffad\011\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\034\uffad\001\002\000\040\004\uff9a\011\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\020\uff9a\021\uff9a\022\uff9a" +
    "\023\uff9a\024\uff9a\025\uff9a\026\uff9a\034\uff9a\041\231\001" +
    "\002\000\040\004\uff99\011\uff99\013\uff99\014\uff99\015\uff99" +
    "\016\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\034\uff99\041\222\001\002\000\004\037\u01bc" +
    "\001\002\000\006\004\143\040\u01be\001\002\000\020\032" +
    "\174\040\u01c0\041\200\042\177\043\172\044\173\045\175" +
    "\001\002\000\040\004\uff97\011\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\u01bf\034\uff97\001\002\000\036\004" +
    "\uff95\011\uff95\013\uff95\014\uff95\015\uff95\016\uff95\020\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\034" +
    "\uff95\001\002\000\040\004\uff98\011\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\u01c1\034\uff98\001\002\000\036" +
    "\004\uff96\011\uff96\013\uff96\014\uff96\015\uff96\016\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96" +
    "\034\uff96\001\002\000\004\004\u01c3\001\002\000\004\040" +
    "\u01c4\001\002\000\004\033\u01c5\001\002\000\006\024\253" +
    "\026\255\001\002\000\010\024\263\026\264\034\u01c7\001" +
    "\002\000\036\004\uff9d\011\uff9d\013\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\034\uff9d\001\002\000\042\004\uffa9\011\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\016\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\u01ca\034\uffa9" +
    "\047\u01c9\001\002\000\022\005\020\006\024\007\025\012" +
    "\021\035\022\037\023\063\015\064\016\001\002\000\036" +
    "\004\uffa6\011\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\034\uffa6\001\002\000\036\004\uffac\011\uffac\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\034\uffac\001\002\000\016\004" +
    "\u014c\005\u014b\007\u0150\037\u014f\042\u014e\062\u014d\001\002" +
    "\000\006\040\u01ce\041\u0153\001\002\000\040\004\uff9b\011" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\u01cf\034" +
    "\uff9b\001\002\000\036\004\uff9c\011\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\016\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\034\uff9c\001\002\000\014\004\330" +
    "\005\326\007\333\037\332\062\327\001\002\000\016\004" +
    "\354\005\352\007\360\037\356\040\u01d2\062\353\001\002" +
    "\000\004\033\u01d3\001\002\000\026\004\136\011\133\013" +
    "\134\014\124\015\130\016\126\020\132\021\131\022\127" +
    "\023\135\001\002\000\030\004\161\011\154\013\157\014" +
    "\147\015\153\016\151\020\155\021\156\022\152\023\160" +
    "\034\u01d5\001\002\000\036\004\uff9f\011\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\034\uff9f\001\002\000\026\004" +
    "\136\011\133\013\134\014\124\015\130\016\126\020\132" +
    "\021\131\022\127\023\135\001\002\000\030\004\161\011" +
    "\154\013\157\014\147\015\153\016\151\020\155\021\156" +
    "\022\152\023\160\034\u01d8\001\002\000\004\020\u01d9\001" +
    "\002\000\004\037\u01da\001\002\000\014\004\330\005\326" +
    "\007\333\037\332\062\327\001\002\000\016\004\354\005" +
    "\352\007\360\037\356\040\u01dc\062\353\001\002\000\036" +
    "\004\uff9e\011\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\020" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e" +
    "\034\uff9e\001\002\000\042\004\uffa7\011\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\u01df\034\uffa7\047\u01de\001" +
    "\002\000\022\005\020\006\024\007\025\012\021\035\022" +
    "\037\023\063\015\064\016\001\002\000\036\004\uffa4\011" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\034\uffa4\001" +
    "\002\000\036\004\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\034\uffaa\001\002\000\010\004\u0165\013\u0166" +
    "\014\u0167\001\002\000\004\004\u0175\001\002\000\004\004" +
    "\u0193\001\002\000\004\040\u01e5\001\002\000\004\033\u01e6" +
    "\001\002\000\026\004\136\011\133\013\134\014\124\015" +
    "\130\016\126\020\132\021\131\022\127\023\135\001\002" +
    "\000\030\004\161\011\154\013\157\014\147\015\153\016" +
    "\151\020\155\021\156\022\152\023\160\034\u01e8\001\002" +
    "\000\036\004\uffa0\011\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\034\uffa0\001\002\000\014\004\330\005\326\007" +
    "\333\037\332\062\327\001\002\000\016\004\354\005\352" +
    "\007\360\037\356\040\u01eb\062\353\001\002\000\004\033" +
    "\u01ec\001\002\000\026\004\136\011\133\013\134\014\124" +
    "\015\130\016\126\020\132\021\131\022\127\023\135\001" +
    "\002\000\030\004\161\011\154\013\157\014\147\015\153" +
    "\016\151\020\155\021\156\022\152\023\160\034\u01ee\001" +
    "\002\000\040\004\uffa3\011\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\u01ef\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\034\uffa3\001\002\000\006\016\u01f1" +
    "\033\u01f0\001\002\000\026\004\136\011\133\013\134\014" +
    "\124\015\130\016\126\020\132\021\131\022\127\023\135" +
    "\001\002\000\004\037\u01f2\001\002\000\014\004\330\005" +
    "\326\007\333\037\332\062\327\001\002\000\016\004\354" +
    "\005\352\007\360\037\356\040\u01f4\062\353\001\002\000" +
    "\004\033\u01f5\001\002\000\026\004\136\011\133\013\134" +
    "\014\124\015\130\016\126\020\132\021\131\022\127\023" +
    "\135\001\002\000\030\004\161\011\154\013\157\014\147" +
    "\015\153\016\151\020\155\021\156\022\152\023\160\034" +
    "\u01f7\001\002\000\036\004\uffa1\011\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024" +
    "\uffa1\025\uffa1\026\uffa1\034\uffa1\001\002\000\030\004\161" +
    "\011\154\013\157\014\147\015\153\016\151\020\155\021" +
    "\156\022\152\023\160\034\u01f9\001\002\000\036\004\uffa2" +
    "\011\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\034\uffa2" +
    "\001\002\000\016\002\ufff4\004\ufff4\010\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\001\002\000\042\004\uffa8\011\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\u01fd\034\uffa8\047\u01fc" +
    "\001\002\000\022\005\020\006\024\007\025\012\021\035" +
    "\022\037\023\063\015\064\016\001\002\000\036\004\uffa5" +
    "\011\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\034\uffa5" +
    "\001\002\000\036\004\uffab\011\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\034\uffab\001\002\000\022\002\uffee\004" +
    "\uffee\010\uffee\013\uffee\014\uffee\015\uffee\027\u0201\047\u0200" +
    "\001\002\000\022\005\020\006\024\007\025\012\021\035" +
    "\022\037\023\063\015\064\016\001\002\000\016\002\uffeb" +
    "\004\uffeb\010\uffeb\013\uffeb\014\uffeb\015\uffeb\001\002\000" +
    "\016\002\ufff1\004\ufff1\010\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\001\002\000\006\004\143\040\u0205\001\002\000\020\032" +
    "\174\040\u0209\041\200\042\177\043\172\044\173\045\175" +
    "\001\002\000\004\033\u0206\001\002\000\026\004\136\011" +
    "\133\013\134\014\124\015\130\016\126\020\132\021\131" +
    "\022\127\023\135\001\002\000\030\004\161\011\154\013" +
    "\157\014\147\015\153\016\151\020\155\021\156\022\152" +
    "\023\160\034\u0208\001\002\000\016\002\ufff3\004\ufff3\010" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\001\002\000\004\033\u020a" +
    "\001\002\000\026\004\136\011\133\013\134\014\124\015" +
    "\130\016\126\020\132\021\131\022\127\023\135\001\002" +
    "\000\030\004\161\011\154\013\157\014\147\015\153\016" +
    "\151\020\155\021\156\022\152\023\160\034\u020c\001\002" +
    "\000\016\002\ufff2\004\ufff2\010\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\001\002\000\004\004\u0229\001\002\000\004\037\u021f" +
    "\001\002\000\004\004\u021b\001\002\000\004\002\001\001" +
    "\002\000\004\004\u0217\001\002\000\004\004\u0213\001\002" +
    "\000\022\002\ufff9\004\ufff9\010\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\027\u0215\047\u0214\001\002\000\022\005\020\006\024" +
    "\007\025\012\021\035\022\037\023\063\015\064\016\001" +
    "\002\000\016\002\ufff6\004\ufff6\010\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\001\002\000\016\002\ufffc\004\ufffc\010\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\001\002\000\004\033\u0218\001\002" +
    "\000\026\004\136\011\133\013\134\014\124\015\130\016" +
    "\126\020\132\021\131\022\127\023\135\001\002\000\030" +
    "\004\161\011\154\013\157\014\147\015\153\016\151\020" +
    "\155\021\156\022\152\023\160\034\u021a\001\002\000\016" +
    "\002\000\004\000\010\000\013\000\014\000\015\000\001" +
    "\002\000\022\002\ufffa\004\ufffa\010\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\027\u021d\047\u021c\001\002\000\022\005\020\006" +
    "\024\007\025\012\021\035\022\037\023\063\015\064\016" +
    "\001\002\000\016\002\ufff7\004\ufff7\010\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\001\002\000\016\002\ufffd\004\ufffd\010\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\001\002\000\006\004\143\040" +
    "\u0221\001\002\000\020\032\174\040\u0225\041\200\042\177" +
    "\043\172\044\173\045\175\001\002\000\004\033\u0222\001" +
    "\002\000\026\004\136\011\133\013\134\014\124\015\130" +
    "\016\126\020\132\021\131\022\127\023\135\001\002\000" +
    "\030\004\161\011\154\013\157\014\147\015\153\016\151" +
    "\020\155\021\156\022\152\023\160\034\u0224\001\002\000" +
    "\016\002\uffff\004\uffff\010\uffff\013\uffff\014\uffff\015\uffff" +
    "\001\002\000\004\033\u0226\001\002\000\026\004\136\011" +
    "\133\013\134\014\124\015\130\016\126\020\132\021\131" +
    "\022\127\023\135\001\002\000\030\004\161\011\154\013" +
    "\157\014\147\015\153\016\151\020\155\021\156\022\152" +
    "\023\160\034\u0228\001\002\000\016\002\ufffe\004\ufffe\010" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\001\002\000\022\002\ufff8" +
    "\004\ufff8\010\ufff8\013\ufff8\014\ufff8\015\ufff8\027\u022b\047" +
    "\u022a\001\002\000\022\005\020\006\024\007\025\012\021" +
    "\035\022\037\023\063\015\064\016\001\002\000\016\002" +
    "\ufff5\004\ufff5\010\ufff5\013\ufff5\014\ufff5\015\ufff5\001\002" +
    "\000\016\002\ufffb\004\ufffb\010\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\001\002\000\022\002\uffec\004\uffec\010\uffec\013\uffec" +
    "\014\uffec\015\uffec\027\u022f\047\u022e\001\002\000\022\005" +
    "\020\006\024\007\025\012\021\035\022\037\023\063\015" +
    "\064\016\001\002\000\016\002\uffe9\004\uffe9\010\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\001\002\000\016\002\uffef\004\uffef" +
    "\010\uffef\013\uffef\014\uffef\015\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u022e\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\075\001\001\000\004\007\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u01b9\001\001\000\004\004" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\215\001" +
    "\001\000\004\004\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\211\001\001\000\004\007\210" +
    "\001\001\000\002\001\001\000\004\007\206\001\001\000" +
    "\002\001\001\000\004\007\201\001\001\000\004\007\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u0123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\376\001\001\000\004\011\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u0104" +
    "\001\001\000\002\001\001\000\004\011\u0102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u0144\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u0147\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\u0153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\u0159\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0161\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0163\001\001" +
    "\000\004\013\u0173\001\001\000\004\007\u016d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0169\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u016c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u0191\001\001" +
    "\000\002\001\001\000\004\007\u018b\001\001\000\004\007" +
    "\u0185\001\001\000\004\007\u017f\001\001\000\004\007\u0179" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u019c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u019f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u01a2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u01ad\001\001\000\002\001\001\000" +
    "\004\011\u01a8\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u01ab\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u01b2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u01b6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u01bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u01c5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u01ca\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u01cc\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u01d0\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u01d3\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u01d6\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u01da\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u01df\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u01e1\001\001\000" +
    "\004\013\u01e2\001\001\000\004\014\u01e3\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u01e6\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u01e9\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u01ec\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u01f7\001\001\000\002\001\001\000\004\011" +
    "\u01f2\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u01f5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u01fd\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0201\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u0203\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u0206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u020a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u0215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u0218" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u021d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u021f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u0222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u022b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u022f\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String Resulto = "";   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= ini E_CLASS IDENTIFICADOR E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= ini IDENTIFICADOR E_PARENTESISIZQ E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= ini IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= ini E_VAR IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini ::= ini E_LET IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini ::= ini E_CONST IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini ::= ini E_VAR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ini ::= ini E_LET IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ini ::= ini E_CONST IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ini ::= ini E_VAR IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ini ::= ini E_LET IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ini ::= ini E_CONST IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ini ::= E_CLASS IDENTIFICADOR E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ini ::= IDENTIFICADOR E_PARENTESISIZQ E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ini ::= IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ini ::= E_VAR IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ini ::= E_LET IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ini ::= E_CONST IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ini ::= E_VAR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ini ::= E_LET IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ini ::= E_CONST IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ini ::= E_VAR IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ini ::= E_LET IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ini ::= E_CONST IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros ::= parametros E_COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros ::= parametros E_MAS opmate 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros ::= parametros E_MENOS opmate 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros ::= parametros E_POR opmate 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= parametros E_DIVIDIR opmate 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros ::= parametros E_POTENCIA opmate 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable ::= E_CADENA E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable ::= E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable ::= E_CADENAUC E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable ::= E_CADENAUC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable ::= DECI E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable ::= E_TRUE E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable ::= E_TRUE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= E_FALSE E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable ::= E_FALSE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable ::= E_PARENTESISIZQ opmate E_PARENTESISDER opmate E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable ::= E_PARENTESISIZQ opmate E_PARENTESISDER opmate 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable ::= E_PARENTESISIZQ opmate E_PARENTESISDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable ::= E_PARENTESISIZQ opmate E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable ::= E_REQUIRE E_PARENTESISIZQ E_CADENA E_PARENTESISDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable ::= E_REQUIRE E_PARENTESISIZQ E_CADENA E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable ::= E_CORIZQ vector E_CORDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable ::= E_CORIZQ vector E_CORDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // vector ::= vector E_COMA E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vector",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vector ::= vector E_COMA DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vector",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // vector ::= vector E_COMA E_CORIZQ vector E_CORDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vector",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // vector ::= E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vector",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // vector ::= DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vector",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vector ::= E_CORIZQ vector E_CORDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vector",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // procesos ::= procesos IDENTIFICADOR E_PARENTESISIZQ E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // procesos ::= procesos IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // procesos ::= procesos E_VAR IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // procesos ::= procesos E_LET IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // procesos ::= procesos E_CONST IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // procesos ::= procesos E_VAR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // procesos ::= procesos E_LET IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procesos ::= procesos E_CONST IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // procesos ::= procesos E_VAR IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // procesos ::= procesos E_LET IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // procesos ::= procesos E_CONST IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // procesos ::= procesos E_IF E_PARENTESISIZQ condicion E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procesos ::= procesos E_IF E_PARENTESISIZQ condicion E_PARENTESISDER E_KEYIZQ procesos E_KEYDER E_ELSE E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // procesos ::= procesos E_IF E_PARENTESISIZQ condicion E_PARENTESISDER E_KEYIZQ procesos E_KEYDER E_ELSE E_IF E_PARENTESISIZQ condicion E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // procesos ::= procesos E_FOR E_PARENTESISIZQ forvariable condicionfor foraumento E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // procesos ::= procesos E_WHILE E_PARENTESISIZQ condicion E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // procesos ::= procesos E_DO E_KEYIZQ procesos E_KEYDER E_WHILE E_PARENTESISIZQ condicion E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // procesos ::= procesos E_SWITCH E_PARENTESISIZQ IDENTIFICADOR E_PARENTESISDER E_KEYIZQ casos E_KEYDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // procesos ::= procesos E_CONSOLE E_PARENTESISIZQ impresion E_PARENTESISDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // procesos ::= procesos IDENTIFICADOR E_EQUALS IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // procesos ::= procesos IDENTIFICADOR E_EQUALS concatenar 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // procesos ::= procesos IDENTIFICADOR E_PUNTO IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procesos ::= procesos IDENTIFICADOR E_PUNTO IDENTIFICADOR E_PARENTESISIZQ E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // procesos ::= procesos IDENTIFICADOR E_PUNTO IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // procesos ::= procesos IDENTIFICADOR E_PUNTO IDENTIFICADOR E_PARENTESISIZQ E_PARENTESISDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // procesos ::= procesos IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // procesos ::= procesos IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // procesos ::= IDENTIFICADOR E_PARENTESISIZQ E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // procesos ::= IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // procesos ::= E_VAR IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // procesos ::= E_LET IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // procesos ::= E_CONST IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // procesos ::= E_VAR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // procesos ::= E_LET IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // procesos ::= E_CONST IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // procesos ::= E_VAR IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // procesos ::= E_LET IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // procesos ::= E_CONST IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // procesos ::= E_IF E_PARENTESISIZQ condicion E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // procesos ::= E_IF E_PARENTESISIZQ condicion E_PARENTESISDER E_KEYIZQ procesos E_KEYDER E_ELSE E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // procesos ::= E_IF E_PARENTESISIZQ condicion E_PARENTESISDER E_KEYIZQ procesos E_KEYDER E_ELSE E_IF E_PARENTESISIZQ condicion E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // procesos ::= E_FOR E_PARENTESISIZQ forvariable condicionfor foraumento E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // procesos ::= E_WHILE E_PARENTESISIZQ condicion E_PARENTESISDER E_KEYIZQ procesos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // procesos ::= E_DO E_KEYIZQ procesos E_KEYDER E_WHILE E_PARENTESISIZQ condicion E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // procesos ::= E_SWITCH E_PARENTESISIZQ IDENTIFICADOR E_PARENTESISDER E_KEYIZQ casos E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // procesos ::= E_CONSOLE E_PARENTESISIZQ impresion E_PARENTESISDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // procesos ::= E_CONSOLE E_PARENTESISIZQ impresion E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // procesos ::= IDENTIFICADOR E_EQUALS IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // procesos ::= IDENTIFICADOR E_EQUALS concatenar 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // procesos ::= IDENTIFICADOR E_PUNTO IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // procesos ::= IDENTIFICADOR E_PUNTO IDENTIFICADOR E_PARENTESISIZQ E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // procesos ::= IDENTIFICADOR E_PUNTO IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // procesos ::= IDENTIFICADOR E_PUNTO IDENTIFICADOR E_PARENTESISIZQ E_PARENTESISDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // procesos ::= IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // procesos ::= IDENTIFICADOR E_PARENTESISIZQ parametros E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // concatenar ::= concatenar E_MAS IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // concatenar ::= concatenar E_MAS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // concatenar ::= concatenar E_MAS E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // concatenar ::= concatenar E_MAS E_CADENAUC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // concatenar ::= IDENTIFICADOR E_MAS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // concatenar ::= IDENTIFICADOR E_MAS E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // concatenar ::= IDENTIFICADOR E_MAS E_CADENAUC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // concatenar ::= DECI E_MAS IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // concatenar ::= E_CADENA E_MAS IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // concatenar ::= E_CADENAUC E_MAS IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // concatenar ::= IDENTIFICADOR E_MAS IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("concatenar",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // forvariable ::= E_VAR IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forvariable",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // forvariable ::= E_LET IDENTIFICADOR E_EQUALS variable 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forvariable",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // forvariable ::= IDENTIFICADOR E_EQUALS DECI E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forvariable",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // forvariable ::= IDENTIFICADOR opmate E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forvariable",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // forvariable ::= IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forvariable",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // condicionfor ::= IDENTIFICADOR E_MAYOR IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // condicionfor ::= IDENTIFICADOR E_MENOR IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // condicionfor ::= IDENTIFICADOR E_MAYORQUE IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // condicionfor ::= IDENTIFICADOR E_MENORQUE IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // condicionfor ::= IDENTIFICADOR E_MAYOR DECI E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // condicionfor ::= IDENTIFICADOR E_MENOR DECI E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // condicionfor ::= IDENTIFICADOR E_MAYORQUE DECI E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // condicionfor ::= IDENTIFICADOR E_MENORQUE DECI E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // condicionfor ::= IDENTIFICADOR E_MAYOR opmate E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // condicionfor ::= IDENTIFICADOR E_MENOR opmate E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // condicionfor ::= IDENTIFICADOR E_MAYORQUE opmate E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // condicionfor ::= IDENTIFICADOR E_MENORQUE opmate E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // foraumento ::= IDENTIFICADOR E_AUMENTO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("foraumento",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // foraumento ::= IDENTIFICADOR E_DISMINUIR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("foraumento",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // foraumento ::= IDENTIFICADOR E_EQUALS E_MAS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("foraumento",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // foraumento ::= IDENTIFICADOR E_EQUALS E_MENOR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("foraumento",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // condicion ::= condicion E_CADENA E_COMPARAR E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // condicion ::= condicion DECI E_COMPARAR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // condicion ::= condicion DECI E_MAYOR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // condicion ::= condicion DECI E_MENOR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // condicion ::= condicion DECI E_MAYORQUE DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // condicion ::= condicion DECI E_MENORQUE DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // condicion ::= condicion IDENTIFICADOR E_COMPARAR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // condicion ::= condicion IDENTIFICADOR E_COMPARAR E_TRUE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // condicion ::= condicion IDENTIFICADOR E_COMPARAR E_FALSE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // condicion ::= condicion IDENTIFICADOR E_COMPARAR E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // condicion ::= condicion IDENTIFICADOR E_MAYOR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // condicion ::= condicion IDENTIFICADOR E_MENOR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // condicion ::= condicion IDENTIFICADOR E_MAYORQUE DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // condicion ::= condicion IDENTIFICADOR E_MENORQUE DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // condicion ::= condicion IDENTIFICADOR E_MAYOR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // condicion ::= condicion IDENTIFICADOR E_MENOR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // condicion ::= condicion IDENTIFICADOR E_MAYORQUE IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // condicion ::= condicion IDENTIFICADOR E_MENORQUE IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // condicion ::= condicion IDENTIFICADOR E_COMPARAR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // condicion ::= condicion DECI E_NOEQUALS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // condicion ::= condicion E_CADENA E_NOEQUALS E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // condicion ::= condicion IDENTIFICADOR E_NOEQUALS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // condicion ::= condicion IDENTIFICADOR E_NOEQUALS E_TRUE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // condicion ::= condicion IDENTIFICADOR E_NOEQUALS E_FALSE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // condicion ::= condicion IDENTIFICADOR E_NOEQUALS E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // condicion ::= condicion IDENTIFICADOR E_NOEQUALS IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // condicion ::= condicion E_NEGAR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // condicion ::= condicion E_PARENTESISIZQ condicion E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // condicion ::= condicion E_PARENTESISIZQ condicion E_OOR condicion E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // condicion ::= condicion E_PARENTESISIZQ condicion E_AND condicion E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // condicion ::= E_CADENA E_COMPARAR E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // condicion ::= DECI E_COMPARAR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // condicion ::= DECI E_MAYOR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condicion ::= DECI E_MENOR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // condicion ::= DECI E_MAYORQUE DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // condicion ::= DECI E_MENORQUE DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // condicion ::= IDENTIFICADOR E_COMPARAR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // condicion ::= IDENTIFICADOR E_COMPARAR E_TRUE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // condicion ::= IDENTIFICADOR E_COMPARAR E_FALSE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // condicion ::= IDENTIFICADOR E_COMPARAR E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // condicion ::= IDENTIFICADOR E_MAYOR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // condicion ::= IDENTIFICADOR E_MENOR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // condicion ::= IDENTIFICADOR E_MAYORQUE DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // condicion ::= IDENTIFICADOR E_MENORQUE DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // condicion ::= IDENTIFICADOR E_MAYOR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // condicion ::= IDENTIFICADOR E_MENOR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // condicion ::= IDENTIFICADOR E_MAYORQUE IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // condicion ::= IDENTIFICADOR E_MENORQUE IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // condicion ::= IDENTIFICADOR E_COMPARAR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // condicion ::= DECI E_NOEQUALS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // condicion ::= E_CADENA E_NOEQUALS E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // condicion ::= IDENTIFICADOR E_NOEQUALS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // condicion ::= IDENTIFICADOR E_NOEQUALS E_TRUE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // condicion ::= IDENTIFICADOR E_NOEQUALS E_FALSE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // condicion ::= IDENTIFICADOR E_NOEQUALS E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // condicion ::= IDENTIFICADOR E_NOEQUALS IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // condicion ::= E_NEGAR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // condicion ::= E_PARENTESISIZQ condicion E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // condicion ::= E_PARENTESISIZQ condicion E_OOR condicion E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // condicion ::= E_PARENTESISIZQ condicion E_AND condicion E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // casos ::= casos E_CASE DECI E_DOSPUNTOS procesos E_BREAK E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // casos ::= casos E_DEFAULT E_DOSPUNTOS procesos E_BREAK E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // casos ::= casos E_DEFAULT E_DOSPUNTOS procesos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // casos ::= casos E_CASE E_CADENA E_DOSPUNTOS procesos E_BREAK E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // casos ::= E_CASE DECI E_DOSPUNTOS procesos E_BREAK E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // casos ::= E_DEFAULT E_DOSPUNTOS procesos E_BREAK E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // casos ::= E_DEFAULT E_DOSPUNTOS procesos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // casos ::= E_CASE E_CADENA E_DOSPUNTOS procesos E_BREAK E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // impresion ::= impresion E_MAS opmate 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // impresion ::= impresion E_MAS 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // impresion ::= E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // impresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // impresion ::= DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // impresion ::= E_MENOS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // impresion ::= E_MENOS E_PARENTESISIZQ opmate E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // impresion ::= E_PARENTESISIZQ opmate E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // impresion ::= IDENTIFICADOR E_AUMENTO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // impresion ::= IDENTIFICADOR E_DISMINUIR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // impresion ::= E_NEGAR IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // opmate ::= opmate E_PARENTESISIZQ opmate E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // opmate ::= opmate DECI E_POTENCIA DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // opmate ::= opmate DECI E_DIVIDIR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // opmate ::= opmate DECI E_MODULO DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // opmate ::= opmate DECI E_POR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // opmate ::= opmate DECI E_MAS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // opmate ::= opmate DECI E_MENOS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // opmate ::= E_PARENTESISIZQ opmate E_PARENTESISDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // opmate ::= DECI E_POTENCIA DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // opmate ::= DECI E_DIVIDIR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // opmate ::= DECI E_MODULO DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // opmate ::= DECI E_POR DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // opmate ::= DECI E_MAS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // opmate ::= DECI E_MENOS DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opmate",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
