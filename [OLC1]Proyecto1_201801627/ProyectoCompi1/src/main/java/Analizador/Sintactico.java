
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import Informacion.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\007\000\002\002\010" +
    "\000\002\002\006\000\002\003\006\000\002\003\007\000" +
    "\002\003\007\000\002\003\007\000\002\015\010\000\002" +
    "\015\010\000\002\015\007\000\002\015\007\000\002\014" +
    "\010\000\002\014\010\000\002\014\010\000\002\014\007" +
    "\000\002\014\007\000\002\014\007\000\002\014\006\000" +
    "\002\014\006\000\002\014\006\000\002\014\007\000\002" +
    "\014\007\000\002\014\007\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\007\006\000" +
    "\002\007\006\000\002\020\010\000\002\016\003\000\002" +
    "\016\003\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\021\010\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\010\006\000\002" +
    "\010\006\000\002\011\006\000\002\011\006\000\002\012" +
    "\006\000\002\012\006\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\022\011\000" +
    "\002\022\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\010\012\004\022\010\023\005\001\002\000" +
    "\004\031\261\001\002\000\024\002\uffb9\007\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\022\uffb9\023\uffb9\032\uffb9\001" +
    "\002\000\004\002\260\001\002\000\010\012\011\022\013" +
    "\023\012\001\002\000\024\002\uffba\007\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\022\uffba\023\uffba\032\uffba\001\002" +
    "\000\004\031\014\001\002\000\024\002\uffbb\007\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\022\uffbb\023\uffbb\032\uffbb" +
    "\001\002\000\024\002\uffbc\007\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\022\uffbc\023\uffbc\032\uffbc\001\002\000\004" +
    "\007\015\001\002\000\004\035\245\001\002\000\004\011" +
    "\017\001\002\000\004\031\022\001\002\000\004\032\021" +
    "\001\002\000\004\002\000\001\002\000\012\013\025\014" +
    "\026\022\010\023\005\001\002\000\014\013\041\014\042" +
    "\022\010\023\005\032\053\001\002\000\012\013\025\014" +
    "\026\022\013\023\012\001\002\000\004\004\033\001\002" +
    "\000\004\004\027\001\002\000\004\024\030\001\002\000" +
    "\004\006\031\001\002\000\004\037\032\001\002\000\014" +
    "\013\ufff3\014\ufff3\022\ufff3\023\ufff3\032\ufff3\001\002\000" +
    "\004\024\034\001\002\000\004\005\035\001\002\000\004" +
    "\037\036\001\002\000\014\013\ufff4\014\ufff4\022\ufff4\023" +
    "\ufff4\032\ufff4\001\002\000\010\013\041\014\042\032\040" +
    "\001\002\000\010\022\ufff9\023\ufff9\032\ufff9\001\002\000" +
    "\004\004\047\001\002\000\004\004\043\001\002\000\004" +
    "\024\044\001\002\000\004\006\045\001\002\000\004\037" +
    "\046\001\002\000\014\013\ufff5\014\ufff5\022\ufff5\023\ufff5" +
    "\032\ufff5\001\002\000\004\024\050\001\002\000\004\005" +
    "\051\001\002\000\004\037\052\001\002\000\014\013\ufff6" +
    "\014\ufff6\022\ufff6\023\ufff6\032\ufff6\001\002\000\020\007" +
    "\015\015\060\017\056\022\ufffa\023\ufffa\030\061\032\ufffa" +
    "\001\002\000\010\022\013\023\012\032\055\001\002\000" +
    "\010\022\ufff8\023\ufff8\032\ufff8\001\002\000\004\031\242" +
    "\001\002\000\020\007\015\015\212\017\211\022\ufff7\023" +
    "\ufff7\030\213\032\ufff7\001\002\000\004\031\206\001\002" +
    "\000\004\031\203\001\002\000\010\015\064\017\063\030" +
    "\065\001\002\000\004\031\152\001\002\000\004\031\135" +
    "\001\002\000\004\031\066\001\002\000\010\020\067\021" +
    "\072\025\074\001\002\000\004\040\130\001\002\000\012" +
    "\020\067\021\072\025\074\032\124\001\002\000\012\020" +
    "\uffd9\021\uffd9\025\uffd9\032\uffd9\001\002\000\004\040\112" +
    "\001\002\000\012\020\uffd8\021\uffd8\025\uffd8\032\uffd8\001" +
    "\002\000\004\040\076\001\002\000\012\020\uffd7\021\uffd7" +
    "\025\uffd7\032\uffd7\001\002\000\004\033\077\001\002\000" +
    "\010\004\101\005\100\006\103\001\002\000\014\004\uffc7" +
    "\005\uffc7\006\uffc7\034\uffc7\041\uffc7\001\002\000\014\004" +
    "\uffc8\005\uffc8\006\uffc8\034\uffc8\041\uffc8\001\002\000\014" +
    "\004\106\005\104\006\110\034\105\041\107\001\002\000" +
    "\014\004\uffc9\005\uffc9\006\uffc9\034\uffc9\041\uffc9\001\002" +
    "\000\014\004\uffc4\005\uffc4\006\uffc4\034\uffc4\041\uffc4\001" +
    "\002\000\004\037\111\001\002\000\014\004\uffc3\005\uffc3" +
    "\006\uffc3\034\uffc3\041\uffc3\001\002\000\014\004\uffc6\005" +
    "\uffc6\006\uffc6\034\uffc6\041\uffc6\001\002\000\014\004\uffc5" +
    "\005\uffc5\006\uffc5\034\uffc5\041\uffc5\001\002\000\016\020" +
    "\uffca\021\uffca\025\uffca\026\uffca\027\uffca\032\uffca\001\002" +
    "\000\004\033\113\001\002\000\006\004\115\005\114\001" +
    "\002\000\012\004\uffcf\005\uffcf\034\uffcf\041\uffcf\001\002" +
    "\000\012\004\uffce\005\uffce\034\uffce\041\uffce\001\002\000" +
    "\012\004\121\005\120\034\117\041\122\001\002\000\004" +
    "\037\123\001\002\000\012\004\uffcc\005\uffcc\034\uffcc\041" +
    "\uffcc\001\002\000\012\004\uffcb\005\uffcb\034\uffcb\041\uffcb" +
    "\001\002\000\012\004\uffcd\005\uffcd\034\uffcd\041\uffcd\001" +
    "\002\000\016\020\uffd0\021\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\032\uffd0\001\002\000\020\007\uffe9\015\uffe9\017\uffe9\022" +
    "\uffe9\023\uffe9\030\uffe9\032\uffe9\001\002\000\012\020\uffdc" +
    "\021\uffdc\025\uffdc\032\uffdc\001\002\000\012\020\uffdb\021" +
    "\uffdb\025\uffdb\032\uffdb\001\002\000\012\020\uffda\021\uffda" +
    "\025\uffda\032\uffda\001\002\000\006\004\132\005\131\001" +
    "\002\000\004\037\134\001\002\000\004\037\133\001\002" +
    "\000\020\016\uffd2\020\uffd2\021\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\032\uffd2\001\002\000\020\016\uffd1\020\uffd1\021\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\032\uffd1\001\002\000\006\016" +
    "\141\020\067\001\002\000\010\016\uffd4\020\uffd4\032\uffd4" +
    "\001\002\000\010\016\uffd3\020\uffd3\032\uffd3\001\002\000" +
    "\010\016\141\020\067\032\147\001\002\000\004\040\142" +
    "\001\002\000\006\004\144\005\143\001\002\000\004\037" +
    "\146\001\002\000\004\037\145\001\002\000\010\016\uffbe" +
    "\020\uffbe\032\uffbe\001\002\000\010\016\uffbd\020\uffbd\032" +
    "\uffbd\001\002\000\020\007\uffe8\015\uffe8\017\uffe8\022\uffe8" +
    "\023\uffe8\030\uffe8\032\uffe8\001\002\000\010\016\uffd6\020" +
    "\uffd6\032\uffd6\001\002\000\010\016\uffd5\020\uffd5\032\uffd5" +
    "\001\002\000\014\020\067\021\072\025\074\026\160\027" +
    "\157\001\002\000\016\020\067\021\072\025\074\026\160" +
    "\027\157\032\176\001\002\000\016\020\uffdd\021\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\032\uffdd\001\002\000\016\020\uffde" +
    "\021\uffde\025\uffde\026\uffde\027\uffde\032\uffde\001\002\000" +
    "\016\020\uffe0\021\uffe0\025\uffe0\026\uffe0\027\uffe0\032\uffe0" +
    "\001\002\000\004\040\170\001\002\000\004\040\163\001" +
    "\002\000\016\020\uffe1\021\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\032\uffe1\001\002\000\016\020\uffdf\021\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\032\uffdf\001\002\000\006\004\165\005\164" +
    "\001\002\000\004\037\167\001\002\000\004\037\166\001" +
    "\002\000\016\020\uffc2\021\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\032\uffc2\001\002\000\016\020\uffc1\021\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\032\uffc1\001\002\000\006\004\172\005\171" +
    "\001\002\000\004\037\174\001\002\000\004\037\173\001" +
    "\002\000\016\020\uffc0\021\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\032\uffc0\001\002\000\016\020\uffbf\021\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\032\uffbf\001\002\000\016\020\uffe2\021\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\032\uffe2\001\002\000\020\007" +
    "\uffe7\015\uffe7\017\uffe7\022\uffe7\023\uffe7\030\uffe7\032\uffe7" +
    "\001\002\000\016\020\uffe3\021\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\032\uffe3\001\002\000\016\020\uffe5\021\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\032\uffe5\001\002\000\016\020\uffe6\021" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\032\uffe6\001\002\000\016" +
    "\020\uffe4\021\uffe4\025\uffe4\026\uffe4\027\uffe4\032\uffe4\001" +
    "\002\000\010\020\067\021\072\025\074\001\002\000\012" +
    "\020\067\021\072\025\074\032\205\001\002\000\020\007" +
    "\uffec\015\uffec\017\uffec\022\uffec\023\uffec\030\uffec\032\uffec" +
    "\001\002\000\006\016\141\020\067\001\002\000\010\016" +
    "\141\020\067\032\210\001\002\000\020\007\uffeb\015\uffeb" +
    "\017\uffeb\022\uffeb\023\uffeb\030\uffeb\032\uffeb\001\002\000" +
    "\004\031\237\001\002\000\004\031\234\001\002\000\004" +
    "\031\231\001\002\000\010\015\216\017\215\030\217\001" +
    "\002\000\004\031\226\001\002\000\004\031\223\001\002" +
    "\000\004\031\220\001\002\000\010\020\067\021\072\025" +
    "\074\001\002\000\012\020\067\021\072\025\074\032\222" +
    "\001\002\000\020\007\ufff1\015\ufff1\017\ufff1\022\ufff1\023" +
    "\ufff1\030\ufff1\032\ufff1\001\002\000\006\016\141\020\067" +
    "\001\002\000\010\016\141\020\067\032\225\001\002\000" +
    "\020\007\ufff0\015\ufff0\017\ufff0\022\ufff0\023\ufff0\030\ufff0" +
    "\032\ufff0\001\002\000\014\020\067\021\072\025\074\026" +
    "\160\027\157\001\002\000\016\020\067\021\072\025\074" +
    "\026\160\027\157\032\230\001\002\000\020\007\ufff2\015" +
    "\ufff2\017\ufff2\022\ufff2\023\ufff2\030\ufff2\032\ufff2\001\002" +
    "\000\010\020\067\021\072\025\074\001\002\000\012\020" +
    "\067\021\072\025\074\032\233\001\002\000\020\007\uffef" +
    "\015\uffef\017\uffef\022\uffef\023\uffef\030\uffef\032\uffef\001" +
    "\002\000\006\016\141\020\067\001\002\000\010\016\141" +
    "\020\067\032\236\001\002\000\020\007\uffee\015\uffee\017" +
    "\uffee\022\uffee\023\uffee\030\uffee\032\uffee\001\002\000\014" +
    "\020\067\021\072\025\074\026\160\027\157\001\002\000" +
    "\016\020\067\021\072\025\074\026\160\027\157\032\241" +
    "\001\002\000\020\007\uffed\015\uffed\017\uffed\022\uffed\023" +
    "\uffed\030\uffed\032\uffed\001\002\000\014\020\067\021\072" +
    "\025\074\026\160\027\157\001\002\000\016\020\067\021" +
    "\072\025\074\026\160\027\157\032\244\001\002\000\020" +
    "\007\uffea\015\uffea\017\uffea\022\uffea\023\uffea\030\uffea\032" +
    "\uffea\001\002\000\006\005\246\010\247\001\002\000\004" +
    "\041\254\001\002\000\004\041\250\001\002\000\004\010" +
    "\251\001\002\000\004\036\252\001\002\000\004\037\253" +
    "\001\002\000\020\011\uffb7\015\uffb7\017\uffb7\022\uffb7\023" +
    "\uffb7\030\uffb7\032\uffb7\001\002\000\004\005\255\001\002" +
    "\000\004\036\256\001\002\000\004\037\257\001\002\000" +
    "\020\011\uffb8\015\uffb8\017\uffb8\022\uffb8\023\uffb8\030\uffb8" +
    "\032\uffb8\001\002\000\004\002\001\001\002\000\006\007" +
    "\015\011\017\001\002\000\010\022\010\023\005\032\272" +
    "\001\002\000\010\011\017\022\010\023\005\001\002\000" +
    "\010\011\017\022\013\023\012\001\002\000\004\032\266" +
    "\001\002\000\010\002\ufffd\022\010\023\005\001\002\000" +
    "\010\002\ufffc\022\013\023\012\001\002\000\004\032\271" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffb\001" +
    "\002\000\010\007\015\022\013\023\012\001\002\000\004" +
    "\032\275\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\006\002\005\013\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\015\001\001\000\002\001\001" +
    "\000\004\003\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\023\015\022\001\001" +
    "\000\004\013\053\001\001\000\004\015\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\056" +
    "\022\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\067\007\070" +
    "\020\072\021\074\001\001\000\002\001\001\000\010\007" +
    "\124\020\125\021\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\137\007\135\012\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\147\012\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\152" +
    "\007\160\010\154\011\153\020\155\021\161\001\001\000" +
    "\014\007\200\010\176\011\174\020\177\021\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\203\007\070\020\072\021\074\001\001" +
    "\000\010\007\124\020\125\021\126\001\001\000\002\001" +
    "\001\000\010\006\206\007\135\012\136\001\001\000\006" +
    "\007\147\012\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\220\007\070\020\072\021\074\001\001\000\010" +
    "\007\124\020\125\021\126\001\001\000\002\001\001\000" +
    "\010\006\223\007\135\012\136\001\001\000\006\007\147" +
    "\012\150\001\001\000\002\001\001\000\016\004\226\007" +
    "\160\010\154\011\153\020\155\021\161\001\001\000\014" +
    "\007\200\010\176\011\174\020\177\021\201\001\001\000" +
    "\002\001\001\000\012\005\231\007\070\020\072\021\074" +
    "\001\001\000\010\007\124\020\125\021\126\001\001\000" +
    "\002\001\001\000\010\006\234\007\135\012\136\001\001" +
    "\000\006\007\147\012\150\001\001\000\002\001\001\000" +
    "\016\004\237\007\160\010\154\011\153\020\155\021\161" +
    "\001\001\000\014\007\200\010\176\011\174\020\177\021" +
    "\201\001\001\000\002\001\001\000\016\004\242\007\160" +
    "\010\154\011\153\020\155\021\161\001\001\000\014\007" +
    "\200\010\176\011\174\020\177\021\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\261\022\262\001\001\000\004\013\272\001\001\000" +
    "\006\003\264\013\263\001\001\000\004\003\267\001\001" +
    "\000\002\001\001\000\004\013\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\273\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public NodeGraph Barras = new NodeGraph();
    public NodeGraph Pie = new NodeGraph();
    public NodeGraph Linea = new NodeGraph();
    public ArrayList<NodeGraph> Graphs = new ArrayList();
    public ArrayList<ValueNode> Data = new ArrayList();
    public ArrayList<String> Values = new ArrayList();
    public ArrayList<String> Token = new ArrayList();
    public ArrayList<String> Ejes = new ArrayList();
    public ArrayList<String> Path = new ArrayList();
    public String Resulta = "";   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= comentario E_GENREPEST E_KEYIZQ comparar contenidogeneral E_KEYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= E_GENREPEST E_KEYIZQ comparar comentario contenidogeneral E_KEYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= E_GENREPEST E_KEYIZQ contenidogeneral comentario comparar E_KEYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= E_GENREPEST E_KEYIZQ comparar contenidogeneral E_KEYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini ::= E_GENREPEST E_KEYIZQ comparar contenidogeneral E_KEYDER comentario 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini ::= E_GENREPEST E_KEYIZQ contenidogeneral E_KEYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenidogeneral ::= E_DG E_KEYIZQ cuerpo E_KEYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenidogeneral ::= E_DG E_KEYIZQ comentario cuerpo E_KEYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenidogeneral ::= E_DG E_KEYIZQ cuerpo comentario E_KEYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contenidogeneral ::= E_DG E_KEYIZQ cuerpo E_KEYDER graficas 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= cuerpo E_STR IDENTIFICADOR E_EQUALS E_CADENA E_PYC 
            {
              ArrayList<ValueNode> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Data.add(new ValueNode(id, lex)); Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= cuerpo E_DOUBLE IDENTIFICADOR E_EQUALS DECI E_PYC 
            {
              ArrayList<ValueNode> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Data.add(new ValueNode(id, lex)); Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= E_STR IDENTIFICADOR E_EQUALS E_CADENA E_PYC 
            {
              ArrayList<ValueNode> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Data.add(new ValueNode(id, lex)); Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= E_DOUBLE IDENTIFICADOR E_EQUALS DECI E_PYC 
            {
              ArrayList<ValueNode> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Data.add(new ValueNode(id, lex)); Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graficas ::= graficas comparar E_GRABAR E_KEYIZQ graphbarra E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.Type=g; Graphs.add(Barras); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // graficas ::= graficas comparar E_GRAPIE E_KEYIZQ graphpie E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Pie.Type=g; Graphs.add(Pie); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // graficas ::= graficas comparar E_GRALINE E_KEYIZQ graphline E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Linea.Type=g; Graphs.add(Linea); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // graficas ::= graficas E_GRAPIE E_KEYIZQ graphpie E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Pie.Type=g; Graphs.add(Pie); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // graficas ::= graficas E_GRALINE E_KEYIZQ graphline E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Linea.Type=g; Graphs.add(Linea); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // graficas ::= graficas E_GRABAR E_KEYIZQ graphbarra E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.Type=g; Graphs.add(Barras); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // graficas ::= E_GRAPIE E_KEYIZQ graphpie E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Pie.Type=g; Graphs.add(Pie); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // graficas ::= E_GRALINE E_KEYIZQ graphline E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Linea.Type=g; Graphs.add(Linea); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // graficas ::= E_GRABAR E_KEYIZQ graphbarra E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.Type=g; Graphs.add(Barras); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // graficas ::= comparar E_GRAPIE E_KEYIZQ graphpie E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Pie.Type=g; Graphs.add(Pie); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // graficas ::= comparar E_GRALINE E_KEYIZQ graphline E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Linea.Type=g; Graphs.add(Linea); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // graficas ::= comparar E_GRABAR E_KEYIZQ graphbarra E_KEYDER 
            {
              ArrayList<NodeGraph> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.Type=g; Graphs.add(Barras); Token.add(g); Token.add(t1); Token.add(t2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // graphbarra ::= graphbarra titulos 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.Title=(String)tit;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphbarra",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // graphbarra ::= graphbarra ejesx 
            {
              Object RESULT =null;
		int ejesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ejesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> ejes = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.Eje=ejes;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphbarra",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // graphbarra ::= graphbarra valoresgeneral 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> value = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.Value=value;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphbarra",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // graphbarra ::= graphbarra titulox 
            {
              Object RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.TX=(String)tx;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphbarra",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // graphbarra ::= graphbarra tituloy 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.TY=(String)ty;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphbarra",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // graphbarra ::= titulos 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.Title=(String)tit;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphbarra",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // graphbarra ::= ejesx 
            {
              Object RESULT =null;
		int ejesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ejesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> ejes = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.Eje=ejes;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphbarra",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // graphbarra ::= valoresgeneral 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> value = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.Value=value;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphbarra",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // graphbarra ::= titulox 
            {
              Object RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.TX=(String)tx;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphbarra",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // graphbarra ::= tituloy 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Barras.TY=(String)ty;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphbarra",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // graphpie ::= graphpie titulos 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Pie.Title=(String)tit;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphpie",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // graphpie ::= graphpie ejesx 
            {
              Object RESULT =null;
		int ejesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ejesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> ejes = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Pie.Eje=ejes;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphpie",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // graphpie ::= graphpie valoresgeneral 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> value = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Pie.Value=value;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphpie",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // graphpie ::= titulos 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Pie.Title=(String)tit;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphpie",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // graphpie ::= ejesx 
            {
              Object RESULT =null;
		int ejesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ejesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> ejes = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Pie.Eje=ejes;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphpie",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // graphpie ::= valoresgeneral 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> value = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Pie.Value=value;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphpie",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // graphline ::= graphline titulos 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Linea.Title=(String)tit;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphline",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // graphline ::= graphline archivo 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Linea.TX=(String)value;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphline",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // graphline ::= titulos 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Linea.Title=(String)tit;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphline",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // graphline ::= archivo 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Linea.TX=(String)value;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graphline",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // titulos ::= E_TITLE E_DOSP IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int respleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int respright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String resp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=resp; Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // titulos ::= E_TITLE E_DOSP E_CADENA E_PYC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int respleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int respright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String resp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=resp; Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ejesx ::= E_EJEX E_DOSP E_CORIZQ contenidox E_CORDER E_PYC 
            {
              ArrayList<String> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=Ejes; Token.add(t1); Token.add(t2); Token.add(t3); Token.add(t4); Token.add(t5);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ejesx",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenidox ::= E_CADENA 
            {
              ArrayList<String> RESULT =null;
		int ejeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ejeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String eje = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add((String)eje);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenidox ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int ejeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ejeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String eje = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add((String)eje);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenidox ::= contenidox E_COMA 
            {
              ArrayList<String> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenidox ::= contenidox E_CADENA 
            {
              ArrayList<String> RESULT =null;
		int ejeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ejeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String eje = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add((String)eje);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenidox ::= contenidox IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int ejeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ejeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String eje = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add((String)eje);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valoresgeneral ::= E_VALORES E_DOSP E_CORIZQ contenidob E_CORDER E_PYC 
            {
              ArrayList<String> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=Values; Token.add(t1); Token.add(t2); Token.add(t3); Token.add(t4); Token.add(t5);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresgeneral",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenidob ::= DECI 
            {
              ArrayList<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Values.add((String)value);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidob",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contenidob ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Values.add(value);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidob",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contenidob ::= E_CADENA 
            {
              ArrayList<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Values.add(value);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidob",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // contenidob ::= contenidob E_COMA 
            {
              ArrayList<String> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidob",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // contenidob ::= contenidob DECI 
            {
              ArrayList<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Values.add((String)value);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidob",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contenidob ::= contenidob E_CADENA 
            {
              ArrayList<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Values.add(value);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidob",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenidob ::= contenidob IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Values.add(value);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidob",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // titulox ::= E_TITLEX E_DOSP IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int respleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int respright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String resp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=resp; Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulox",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // titulox ::= E_TITLEX E_DOSP E_CADENA E_PYC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int respleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int respright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String resp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=resp; Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulox",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tituloy ::= E_TITLEY E_DOSP IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int respleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int respright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String resp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=resp; Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tituloy",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tituloy ::= E_TITLEY E_DOSP E_CADENA E_PYC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int respleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int respright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String resp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=resp; Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tituloy",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // archivo ::= E_ARCHIVO E_DOSP IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int respleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int respright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String resp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=resp; Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("archivo",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // archivo ::= E_ARCHIVO E_DOSP E_CADENA E_PYC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int respleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int respright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String resp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=resp; Token.add(t1); Token.add(t2); Token.add(t3);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("archivo",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comentario ::= comentario LINECOMMENT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentario",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comentario ::= comentario MULTILINECOMMENT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentario",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comentario ::= LINECOMMENT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentario",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comentario ::= MULTILINECOMMENT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Token.add(t1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentario",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comparar ::= E_COMPARE E_PARENTESISIZQ E_CADENA E_COMA E_CADENA E_PARENTESISDER E_PYC 
            {
              ArrayList<String> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int path1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int path1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String path1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int path2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int path2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String path2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Path.add(path1); Path.add(path2); Token.add(t1); Token.add(t2); Token.add(t3); Token.add(t4); Token.add(t5);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparar",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comparar ::= E_COMPARE E_PARENTESISIZQ E_COMILLASIMPLE E_COMA E_COMILLASIMPLE E_PARENTESISDER E_PYC 
            {
              ArrayList<String> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int path1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int path1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String path1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int path2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int path2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String path2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Path.add(path1); Path.add(path2); Token.add(t1); Token.add(t2); Token.add(t3); Token.add(t4); Token.add(t5);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparar",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
