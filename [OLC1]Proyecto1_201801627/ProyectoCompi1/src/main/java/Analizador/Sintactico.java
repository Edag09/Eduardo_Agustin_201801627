
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\002\007\000\002\002\006\000\002\002\007" +
    "\000\002\003\006\000\002\003\007\000\002\003\007\000" +
    "\002\003\007\000\002\004\010\000\002\004\010\000\002" +
    "\004\007\000\002\004\007\000\002\005\007\000\002\005" +
    "\007\000\002\005\007\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\004\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\011\006\000\002\011" +
    "\006\000\002\012\010\000\002\013\003\000\002\013\003" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\014\010\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\016\006\000\002\016\006" +
    "\000\002\017\006\000\002\017\006\000\002\020\006\000" +
    "\002\020\006\000\002\021\004\000\002\021\004\000\002" +
    "\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\010\010\004\020\010\021\005\001\002\000" +
    "\004\027\212\001\002\000\022\002\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\020\uffc0\021\uffc0\030\uffc0\001\002\000" +
    "\004\002\211\001\002\000\010\010\011\020\013\021\012" +
    "\001\002\000\022\002\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\020\uffc1\021\uffc1\030\uffc1\001\002\000\004\027\014" +
    "\001\002\000\022\002\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\020\uffc2\021\uffc2\030\uffc2\001\002\000\022\002\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\020\uffc3\021\uffc3\030" +
    "\uffc3\001\002\000\004\007\015\001\002\000\004\027\020" +
    "\001\002\000\004\030\017\001\002\000\004\002\000\001" +
    "\002\000\012\011\023\012\024\020\010\021\005\001\002" +
    "\000\014\011\037\012\040\020\010\021\005\030\051\001" +
    "\002\000\012\011\023\012\024\020\013\021\012\001\002" +
    "\000\004\004\031\001\002\000\004\004\025\001\002\000" +
    "\004\022\026\001\002\000\004\006\027\001\002\000\004" +
    "\033\030\001\002\000\014\011\ufff4\012\ufff4\020\ufff4\021" +
    "\ufff4\030\ufff4\001\002\000\004\022\032\001\002\000\004" +
    "\005\033\001\002\000\004\033\034\001\002\000\014\011" +
    "\ufff5\012\ufff5\020\ufff5\021\ufff5\030\ufff5\001\002\000\010" +
    "\011\037\012\040\030\036\001\002\000\010\020\ufffa\021" +
    "\ufffa\030\ufffa\001\002\000\004\004\045\001\002\000\004" +
    "\004\041\001\002\000\004\022\042\001\002\000\004\006" +
    "\043\001\002\000\004\033\044\001\002\000\014\011\ufff6" +
    "\012\ufff6\020\ufff6\021\ufff6\030\ufff6\001\002\000\004\022" +
    "\046\001\002\000\004\005\047\001\002\000\004\033\050" +
    "\001\002\000\014\011\ufff7\012\ufff7\020\ufff7\021\ufff7\030" +
    "\ufff7\001\002\000\016\013\056\015\054\020\ufffb\021\ufffb" +
    "\026\057\030\ufffb\001\002\000\010\020\013\021\012\030" +
    "\053\001\002\000\010\020\ufff9\021\ufff9\030\ufff9\001\002" +
    "\000\004\027\206\001\002\000\016\013\145\015\144\020" +
    "\ufff8\021\ufff8\026\146\030\ufff8\001\002\000\004\027\127" +
    "\001\002\000\004\027\060\001\002\000\010\016\061\017" +
    "\065\023\067\001\002\000\004\034\122\001\002\000\012" +
    "\016\061\017\065\023\067\030\116\001\002\000\012\016" +
    "\uffde\017\uffde\023\uffde\030\uffde\001\002\000\012\016\uffe0" +
    "\017\uffe0\023\uffe0\030\uffe0\001\002\000\004\034\104\001" +
    "\002\000\012\016\uffdf\017\uffdf\023\uffdf\030\uffdf\001\002" +
    "\000\004\034\070\001\002\000\004\031\071\001\002\000" +
    "\010\004\073\005\072\006\074\001\002\000\014\004\uffce" +
    "\005\uffce\006\uffce\032\uffce\035\uffce\001\002\000\014\004" +
    "\uffcf\005\uffcf\006\uffcf\032\uffcf\035\uffcf\001\002\000\014" +
    "\004\uffd0\005\uffd0\006\uffd0\032\uffd0\035\uffd0\001\002\000" +
    "\014\004\100\005\076\006\102\032\077\035\101\001\002" +
    "\000\014\004\uffcb\005\uffcb\006\uffcb\032\uffcb\035\uffcb\001" +
    "\002\000\004\033\103\001\002\000\014\004\uffca\005\uffca" +
    "\006\uffca\032\uffca\035\uffca\001\002\000\014\004\uffcd\005" +
    "\uffcd\006\uffcd\032\uffcd\035\uffcd\001\002\000\014\004\uffcc" +
    "\005\uffcc\006\uffcc\032\uffcc\035\uffcc\001\002\000\016\016" +
    "\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1\030\uffd1\001\002" +
    "\000\004\031\105\001\002\000\006\004\107\005\106\001" +
    "\002\000\012\004\uffd6\005\uffd6\032\uffd6\035\uffd6\001\002" +
    "\000\012\004\uffd5\005\uffd5\032\uffd5\035\uffd5\001\002\000" +
    "\012\004\113\005\112\032\111\035\114\001\002\000\004" +
    "\033\115\001\002\000\012\004\uffd3\005\uffd3\032\uffd3\035" +
    "\uffd3\001\002\000\012\004\uffd2\005\uffd2\032\uffd2\035\uffd2" +
    "\001\002\000\012\004\uffd4\005\uffd4\032\uffd4\035\uffd4\001" +
    "\002\000\016\016\uffd7\017\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\030\uffd7\001\002\000\016\013\ufff0\015\ufff0\020\ufff0\021" +
    "\ufff0\026\ufff0\030\ufff0\001\002\000\012\016\uffe3\017\uffe3" +
    "\023\uffe3\030\uffe3\001\002\000\012\016\uffe1\017\uffe1\023" +
    "\uffe1\030\uffe1\001\002\000\012\016\uffe2\017\uffe2\023\uffe2" +
    "\030\uffe2\001\002\000\006\004\124\005\123\001\002\000" +
    "\004\033\126\001\002\000\004\033\125\001\002\000\020" +
    "\014\uffd9\016\uffd9\017\uffd9\023\uffd9\024\uffd9\025\uffd9\030" +
    "\uffd9\001\002\000\020\014\uffd8\016\uffd8\017\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\030\uffd8\001\002\000\006\014\132\016" +
    "\061\001\002\000\010\014\uffdb\016\uffdb\030\uffdb\001\002" +
    "\000\010\014\uffda\016\uffda\030\uffda\001\002\000\004\034" +
    "\137\001\002\000\010\014\132\016\061\030\134\001\002" +
    "\000\016\013\uffef\015\uffef\020\uffef\021\uffef\026\uffef\030" +
    "\uffef\001\002\000\010\014\uffdd\016\uffdd\030\uffdd\001\002" +
    "\000\010\014\uffdc\016\uffdc\030\uffdc\001\002\000\006\004" +
    "\141\005\140\001\002\000\004\033\143\001\002\000\004" +
    "\033\142\001\002\000\010\014\uffc5\016\uffc5\030\uffc5\001" +
    "\002\000\010\014\uffc4\016\uffc4\030\uffc4\001\002\000\004" +
    "\027\155\001\002\000\004\027\152\001\002\000\004\027" +
    "\147\001\002\000\010\016\061\017\065\023\067\001\002" +
    "\000\012\016\061\017\065\023\067\030\151\001\002\000" +
    "\016\013\ufff2\015\ufff2\020\ufff2\021\ufff2\026\ufff2\030\ufff2" +
    "\001\002\000\006\014\132\016\061\001\002\000\010\014" +
    "\132\016\061\030\154\001\002\000\016\013\ufff1\015\ufff1" +
    "\020\ufff1\021\ufff1\026\ufff1\030\ufff1\001\002\000\014\016" +
    "\061\017\065\023\067\024\164\025\163\001\002\000\016" +
    "\016\uffe6\017\uffe6\023\uffe6\024\uffe6\025\uffe6\030\uffe6\001" +
    "\002\000\016\016\uffe4\017\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\030\uffe4\001\002\000\016\016\uffe5\017\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\030\uffe5\001\002\000\016\016\061\017\065" +
    "\023\067\024\164\025\163\030\201\001\002\000\016\016" +
    "\uffe7\017\uffe7\023\uffe7\024\uffe7\025\uffe7\030\uffe7\001\002" +
    "\000\004\034\173\001\002\000\004\034\166\001\002\000" +
    "\016\016\uffe8\017\uffe8\023\uffe8\024\uffe8\025\uffe8\030\uffe8" +
    "\001\002\000\006\004\170\005\167\001\002\000\004\033" +
    "\172\001\002\000\004\033\171\001\002\000\016\016\uffc9" +
    "\017\uffc9\023\uffc9\024\uffc9\025\uffc9\030\uffc9\001\002\000" +
    "\016\016\uffc8\017\uffc8\023\uffc8\024\uffc8\025\uffc8\030\uffc8" +
    "\001\002\000\006\004\175\005\174\001\002\000\004\033" +
    "\177\001\002\000\004\033\176\001\002\000\016\016\uffc7" +
    "\017\uffc7\023\uffc7\024\uffc7\025\uffc7\030\uffc7\001\002\000" +
    "\016\016\uffc6\017\uffc6\023\uffc6\024\uffc6\025\uffc6\030\uffc6" +
    "\001\002\000\016\016\uffeb\017\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\030\uffeb\001\002\000\016\013\ufff3\015\ufff3\020\ufff3" +
    "\021\ufff3\026\ufff3\030\ufff3\001\002\000\016\016\uffe9\017" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\030\uffe9\001\002\000\016" +
    "\016\uffea\017\uffea\023\uffea\024\uffea\025\uffea\030\uffea\001" +
    "\002\000\016\016\uffec\017\uffec\023\uffec\024\uffec\025\uffec" +
    "\030\uffec\001\002\000\016\016\uffed\017\uffed\023\uffed\024" +
    "\uffed\025\uffed\030\uffed\001\002\000\014\016\061\017\065" +
    "\023\067\024\164\025\163\001\002\000\016\016\061\017" +
    "\065\023\067\024\164\025\163\030\210\001\002\000\016" +
    "\013\uffee\015\uffee\020\uffee\021\uffee\026\uffee\030\uffee\001" +
    "\002\000\004\002\001\001\002\000\010\007\015\020\010" +
    "\021\005\001\002\000\010\007\015\020\013\021\012\001" +
    "\002\000\010\020\010\021\005\030\215\001\002\000\010" +
    "\002\ufffd\020\010\021\005\001\002\000\010\020\013\021" +
    "\012\030\217\001\002\000\004\002\ufffe\001\002\000\010" +
    "\002\ufffc\020\013\021\012\001\002\000\004\030\222\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\006\002\005\021\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\020\021" +
    "\021\001\001\000\004\021\051\001\001\000\004\004\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\061\011\063\012\065\014\062" +
    "\001\001\000\002\001\001\000\010\011\116\012\120\014" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\132\011" +
    "\127\020\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\134\020\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\147\011\063\012\065\014" +
    "\062\001\001\000\010\011\116\012\120\014\117\001\001" +
    "\000\002\001\001\000\010\010\152\011\127\020\130\001" +
    "\001\000\006\011\134\020\135\001\001\000\002\001\001" +
    "\000\016\006\160\011\164\012\161\014\155\016\157\017" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\204\012\203\014\177\016\202\017" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\206\011\164\012\161" +
    "\014\155\016\157\017\156\001\001\000\014\011\204\012" +
    "\203\014\177\016\202\017\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\213\021\212\001\001\000" +
    "\004\003\220\001\001\000\004\021\215\001\001\000\004" +
    "\021\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String Resulto = "";   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= comentario E_GENREPEST E_KEYIZQ contenidogeneral E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= E_GENREPEST E_KEYIZQ comentario contenidogeneral E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= E_GENREPEST E_KEYIZQ contenidogeneral comentario E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= E_GENREPEST E_KEYIZQ contenidogeneral E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini ::= E_GENREPEST E_KEYIZQ contenidogeneral E_KEYDER comentario 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contenidogeneral ::= E_DG E_KEYIZQ cuerpo E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenidogeneral ::= E_DG E_KEYIZQ comentario cuerpo E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenidogeneral ::= E_DG E_KEYIZQ cuerpo comentario E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenidogeneral ::= E_DG E_KEYIZQ cuerpo E_KEYDER graficas 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= cuerpo E_STR IDENTIFICADOR E_EQUALS E_CADENA E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= cuerpo E_DOUBLE IDENTIFICADOR E_EQUALS DECI E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= E_STR IDENTIFICADOR E_EQUALS E_CADENA E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= E_DOUBLE IDENTIFICADOR E_EQUALS DECI E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graficas ::= graficas E_GRABAR E_KEYIZQ datosgraficabarra E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graficas ::= graficas E_GRAPIE E_KEYIZQ datosgraficapie E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // graficas ::= graficas E_GRALINE E_KEYIZQ datosgraficalinea E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // graficas ::= E_GRAPIE E_KEYIZQ datosgraficapie E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // graficas ::= E_GRALINE E_KEYIZQ datosgraficalinea E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // graficas ::= E_GRABAR E_KEYIZQ datosgraficabarra E_KEYDER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // datosgraficabarra ::= datosgraficabarra titulos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // datosgraficabarra ::= datosgraficabarra ejesx 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datosgraficabarra ::= datosgraficabarra valoresbarras 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // datosgraficabarra ::= datosgraficabarra titulox 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // datosgraficabarra ::= datosgraficabarra tituloy 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // datosgraficabarra ::= titulos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // datosgraficabarra ::= ejesx 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // datosgraficabarra ::= valoresbarras 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // datosgraficabarra ::= titulox 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // datosgraficabarra ::= tituloy 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // datosgraficapie ::= datosgraficapie titulos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // datosgraficapie ::= datosgraficapie ejesx 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // datosgraficapie ::= datosgraficapie valoresbarras 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // datosgraficapie ::= titulos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // datosgraficapie ::= ejesx 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // datosgraficapie ::= valoresbarras 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // datosgraficalinea ::= datosgraficalinea titulos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalinea",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // datosgraficalinea ::= datosgraficalinea archivo 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalinea",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // datosgraficalinea ::= titulos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalinea",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // datosgraficalinea ::= archivo 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalinea",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // titulos ::= E_TITLE E_DOSP IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulos",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // titulos ::= E_TITLE E_DOSP E_CADENA E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulos",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ejesx ::= E_EJEX E_DOSP E_CORIZQ contenidox E_CORDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ejesx",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // contenidox ::= E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // contenidox ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contenidox ::= contenidox E_COMA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // contenidox ::= contenidox E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contenidox ::= contenidox IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valoresbarras ::= E_VALORES E_DOSP E_CORIZQ contenidov E_CORDER E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresbarras",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contenidov ::= DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenidov ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenidov ::= E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenidov ::= contenidov E_COMA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenidov ::= contenidov DECI 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenidov ::= contenidov E_CADENA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenidov ::= contenidov IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // titulox ::= E_TITLEX E_DOSP IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // titulox ::= E_TITLEX E_DOSP E_CADENA E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tituloy ::= E_TITLEY E_DOSP IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tituloy",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tituloy ::= E_TITLEY E_DOSP E_CADENA E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tituloy",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // archivo ::= E_ARCHIVO E_DOSP IDENTIFICADOR E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("archivo",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // archivo ::= E_ARCHIVO E_DOSP E_CADENA E_PYC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("archivo",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comentario ::= comentario LINECOMMENT 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentario",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comentario ::= comentario MULTILINECOMMENT 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentario",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comentario ::= LINECOMMENT 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentario",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comentario ::= MULTILINECOMMENT 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentario",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
