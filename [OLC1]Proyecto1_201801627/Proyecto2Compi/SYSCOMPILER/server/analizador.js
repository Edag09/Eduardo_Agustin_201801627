/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,13],$V2=[1,14],$V3=[1,19],$V4=[1,16],$V5=[1,17],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[5,14,24,25,65,68,69,71,72,73,74,75],$Vc=[1,39],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[2,14,16,21,67],$Vh=[1,46],$Vi=[1,45],$Vj=[1,48],$Vk=[1,51],$Vl=[1,53],$Vm=[1,69],$Vn=[1,60],$Vo=[1,59],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[2,5,14,15,19,24,25,37,38,40,44,45,50,56,58,61,63,65,68,69,71,72,73,74,75,77,88,89,90,91,92,93,94,95,108,109,110,111,112,113,114,115,116],$VG=[2,5,14,19,24,25,37,38,40,44,45,50,56,58,61,63,65,68,69,71,72,73,74,75,108],$VH=[1,121],$VI=[1,123],$VJ=[1,113],$VK=[1,114],$VL=[1,115],$VM=[1,116],$VN=[1,117],$VO=[1,118],$VP=[1,119],$VQ=[1,120],$VR=[1,122],$VS=[1,124],$VT=[1,125],$VU=[1,126],$VV=[1,127],$VW=[16,19,22,27,29,62,66,67,76,77,78,79,80,81,82,83,84,85,86,87,99],$VX=[1,134],$VY=[1,149],$VZ=[16,29],$V_=[1,153],$V$=[1,156],$V01=[16,19,22,27,29,62,86,87,99],$V11=[2,14],$V21=[1,210],$V31=[1,212],$V41=[1,219],$V51=[1,220],$V61=[1,221],$V71=[1,228],$V81=[1,229],$V91=[1,230],$Va1=[1,226],$Vb1=[1,227],$Vc1=[1,222],$Vd1=[1,248],$Ve1=[16,19,29],$Vf1=[16,19,22,27,29,62,66,67,76,77,82,83,84,85,86,87,99],$Vg1=[16,19,22,27,29,62,66,67,76,77,78,79,81,82,83,84,85,86,87,99],$Vh1=[16,19,22,27,29,62,66,67,82,83,84,85,86,87,99],$Vi1=[2,14,19,37,38,40,44,45,50,56,58,61,63,65,68,69,71,72,73,74,75,108],$Vj1=[1,271],$Vk1=[1,375],$Vl1=[19,61,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"ENTRADA":4,"EOF":5,"ENTCERO":6,"FUNCIONBODY":7,"METODOBODY":8,"STARTWITHBODY":9,"DEC_VAR":10,"DEC_VECT":11,"DEC_LIST":12,"TIPO":13,"IDENTIFICADOR":14,"PARENTESIS_ABRE":15,"PARENTESIS_CIERRA":16,"LlaveAbre":17,"INSTRUCCION":18,"LlaveCierra":19,"LISTAPARAMETROS":20,"COR_ABRE":21,"COR_CIERRA":22,"TIPO_LIST":23,"TK_VOID":24,"TK_START":25,"TK_WITH":26,"TK_PYC":27,"LISTAVALORES":28,"COMA":29,"PARAMETROS":30,"INSCERO":31,"SENTENCIACONTROL":32,"SENTENCIACICLO":33,"SENTENCIATRANSFERENCIA":34,"LLAMADA":35,"FPRINT":36,"TK_BREAK":37,"TK_RETURN":38,"EXPRESION":39,"TK_CONTINUE":40,"WHILE":41,"FOR":42,"DOWHILE":43,"TK_WHILE":44,"TK_FOR":45,"ACTUALIZACION":46,"IGUAL":47,"INCREMENTO":48,"DECREMENTO":49,"TK_DO":50,"CONTROLIF":51,"SWITCH":52,"IF":53,"IFELSE":54,"ELSEIF":55,"TK_IF":56,"TK_ELSE":57,"TK_SWITCH":58,"CASESLIST":59,"DEFAULT":60,"TK_CASE":61,"DOSPUNTS":62,"TK_DEFAULT":63,"NEW":64,"DYNAMICLIST":65,"MENOR":66,"MAYOR":67,"APPEND":68,"SETVALUE":69,"TIPODATO":70,"STRING":71,"INTEGER":72,"DOUBLE":73,"CHAR":74,"BOOLEAN":75,"OP_SUMA":76,"OP_MENOS":77,"OP_MULTIPLICACION":78,"OP_DIVISION":79,"OP_EXPONENTE":80,"OP_MODULO":81,"IGUALIGUAL":82,"DIFERENTEA":83,"MENORIGUAL":84,"MAYORIGUAL":85,"OR":86,"AND":87,"NOT":88,"CADENA":89,"CARACTER":90,"TRUE":91,"FALSE":92,"ENTERO":93,"DECI":94,"GETVALUE":95,"CASTEO":96,"TERNARIO":97,"FUNCIONESRESERVADAS":98,"OP_TERNARIO":99,"FTOLOWER":100,"FTOUPPER":101,"FLENGTH":102,"FTRUNCATE":103,"FROUND":104,"FTYPEOF":105,"FTOSTRING":106,"FTOCHARARRAY":107,"WRITELINE":108,"TK_TOLOWER":109,"TK_TOUPPER":110,"TK_LENGTH":111,"TK_TRUNCATE":112,"TK_ROUND":113,"TK_TYPEOF":114,"TK_TOSTRING":115,"TK_TOCHARARRAY":116,"VALORES":117,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"IDENTIFICADOR",15:"PARENTESIS_ABRE",16:"PARENTESIS_CIERRA",17:"LlaveAbre",19:"LlaveCierra",21:"COR_ABRE",22:"COR_CIERRA",24:"TK_VOID",25:"TK_START",26:"TK_WITH",27:"TK_PYC",29:"COMA",37:"TK_BREAK",38:"TK_RETURN",40:"TK_CONTINUE",44:"TK_WHILE",45:"TK_FOR",47:"IGUAL",48:"INCREMENTO",49:"DECREMENTO",50:"TK_DO",56:"TK_IF",57:"TK_ELSE",58:"TK_SWITCH",61:"TK_CASE",62:"DOSPUNTS",63:"TK_DEFAULT",64:"NEW",65:"DYNAMICLIST",66:"MENOR",67:"MAYOR",68:"APPEND",69:"SETVALUE",71:"STRING",72:"INTEGER",73:"DOUBLE",74:"CHAR",75:"BOOLEAN",76:"OP_SUMA",77:"OP_MENOS",78:"OP_MULTIPLICACION",79:"OP_DIVISION",80:"OP_EXPONENTE",81:"OP_MODULO",82:"IGUALIGUAL",83:"DIFERENTEA",84:"MENORIGUAL",85:"MAYORIGUAL",86:"OR",87:"AND",88:"NOT",89:"CADENA",90:"CARACTER",91:"TRUE",92:"FALSE",93:"ENTERO",94:"DECI",95:"GETVALUE",99:"OP_TERNARIO",108:"WRITELINE",109:"TK_TOLOWER",110:"TK_TOUPPER",111:"TK_LENGTH",112:"TK_TRUNCATE",113:"TK_ROUND",114:"TK_TYPEOF",115:"TK_TOSTRING",116:"TK_TOCHARARRAY"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,6],[7,8],[7,7],[7,9],[7,8],[7,10],[7,9],[7,7],[7,6],[7,8],[7,7],[7,3],[7,5],[7,3],[8,7],[8,6],[8,8],[8,7],[8,3],[9,6],[9,7],[9,4],[20,3],[20,1],[30,4],[30,2],[30,2],[18,2],[18,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,2],[31,1],[31,2],[31,2],[34,2],[34,3],[34,2],[34,2],[33,1],[33,1],[33,1],[41,7],[41,6],[41,3],[42,10],[42,9],[42,3],[46,3],[46,2],[46,2],[43,9],[43,8],[43,3],[32,1],[32,1],[51,1],[51,1],[51,1],[51,3],[53,7],[53,6],[54,11],[54,10],[54,10],[54,9],[55,9],[55,8],[52,8],[52,7],[52,7],[52,3],[59,5],[59,4],[59,4],[59,3],[59,3],[60,3],[60,2],[10,5],[10,3],[10,4],[10,3],[10,3],[10,3],[11,11],[11,9],[11,7],[11,7],[11,5],[12,9],[12,7],[12,9],[12,5],[12,3],[23,4],[13,1],[70,1],[70,1],[70,1],[70,1],[70,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,6],[39,4],[39,1],[39,1],[39,1],[39,1],[39,1],[96,4],[97,5],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[36,5],[36,4],[36,3],[100,4],[101,4],[102,4],[103,4],[104,4],[105,4],[106,4],[107,4],[35,4],[35,3],[28,3],[28,1],[117,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 retorno = { parse: $$[$0-1], errores: errores }; errores = []; return retorno; 
break;
case 2:
 retorno = { parse: null, errores: errores }; errores = []; return retorno; 
break;
case 3: case 39:
 if($$[$0]!=="") $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 4:
if($$[$0]!=="") this.$=[$$[$0]]; else this.$=[]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 41: case 42: case 43: case 44: case 45: case 46: case 48: case 55: case 56: case 57: case 70: case 71: case 72: case 73: case 74: case 144: case 145: case 146: case 147: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 173:
this.$=$$[$0]
break;
case 11:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-5], null, $$[$0-1], $$[$0-6], this._$.first_line, this._$.first_column+1) 
break;
case 12:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-4], null, [], $$[$0-5], this._$.first_line, this._$.first_column+1) 
break;
case 13:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], $$[$0-4], $$[$0-1], $$[$0-7], this._$.first_line, this._$.first_column+1) 
break;
case 14:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-5], $$[$0-3], [], $$[$0-6], this._$.first_line, this._$.first_column+1) 
break;
case 15:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-7], null, $$[$0-1], {vector: $$[$0-8]}, this._$.first_line, this._$.first_column+1) 
break;
case 16:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], null, [], {vector: $$[$0-7]}, this._$.first_line, this._$.first_column+1) 
break;
case 17:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-8], $$[$0-4], $$[$0-1], {vector: $$[$0-9]}, this._$.first_line, this._$.first_column+1) 
break;
case 18:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-7], $$[$0-3], [], {vector: $$[$0-8]}, this._$.first_line, this._$.first_column+1) 
break;
case 19:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-5], null, $$[$0-1], {lista: $$[$0-6]}, this._$.first_line, this._$.first_column+1) 
break;
case 20:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-4], null, [], {lista: $$[$0-5]}, this._$.first_line, this._$.first_column+1) 
break;
case 21:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], $$[$0-4], $$[$0-1], {lista: $$[$0-7]}, this._$.first_line, this._$.first_column+1) 
break;
case 22:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-5], $$[$0-3], [], {lista: $$[$0-6]}, this._$.first_line, this._$.first_column+1) 
break;
case 23: case 24: case 25:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de función no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 26:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], [], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 27:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-4], [], [], this._$.first_line, this._$.first_column+1) 
break;
case 28:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 29:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], $$[$0-3], [], this._$.first_line, this._$.first_column+1) 
break;
case 30:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de método no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 31:
this.$ = INSTRUCCION.nuevoStart($$[$0-3], null, this._$.first_line, this._$.first_column+1)
break;
case 32:
this.$ = INSTRUCCION.nuevoStart($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column+1)
break;
case 33:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Llamada de Start With no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 34: case 171:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 35: case 172:
this.$=[$$[$0]];
break;
case 36:
this.$ = INSTRUCCION.nuevoParametro($$[$0-2], {vector: $$[$0-3]}, this._$.first_line, this._$.first_column+1)
break;
case 37:
this.$ = INSTRUCCION.nuevoParametro($$[$0], {lista: $$[$0-1]}, this._$.first_line, this._$.first_column+1)
break;
case 38:
this.$ = INSTRUCCION.nuevoParametro($$[$0], $$[$0-1], this._$.first_line, this._$.first_column+1)
break;
case 40:
 if($$[$0]!=="") this.$=[$$[$0]]; else this.$=[]; 
break;
case 47: case 125:
this.$=$$[$0-1]
break;
case 49: case 50:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de instrucción no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 51:
 this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line, this._$.first_column+1) 
break;
case 52:
 this.$ = new INSTRUCCION.nuevoReturn($$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 53:
 this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line, this._$.first_column+1) 
break;
case 54:
 this.$ = new INSTRUCCION.nuevoReturn(null, this._$.first_line, this._$.first_column+1) 
break;
case 58:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 59:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-3], [], this._$.first_line,this._$.first_column+1)
break;
case 60:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de ciclo While no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 61:
$$[$0-1].push($$[$0-4]); this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-6], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 62:
 this.$ = new INSTRUCCION.nuevoFor($$[$0-6], $$[$0-5], [$$[$0-3]], this._$.first_line,this._$.first_column+1)
break;
case 63:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de ciclo For no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 64:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 65:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-1],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-1], linea: this._$.first_line, columna: this._$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
  			tipo: 'SUMA',
  			linea: this._$.first_line,
  			columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 66:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-1],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-1], linea: this._$.first_line, columna: this._$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
  			tipo: 'RESTA',
  			linea: this._$.first_line,
  			columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 67:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6], this._$.first_line,this._$.first_column+1)
break;
case 68:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-1], [], this._$.first_line,this._$.first_column+1)
break;
case 69:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de sentencia Do-While no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 75:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de sentencia If no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 76:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 77:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-3], [], this._$.first_line,this._$.first_column+1) 
break;
case 78:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 79:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-7], [], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 80:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-7], $$[$0-4], [], this._$.first_line,this._$.first_column+1) 
break;
case 81:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-6], [], [], this._$.first_line,this._$.first_column+1) 
break;
case 82:
 this.$ = new INSTRUCCION.nuevoElseIf($$[$0-6], $$[$0-3], $$[$0], this._$.first_line,this._$.first_column+1); 
break;
case 83:
 this.$ = new INSTRUCCION.nuevoElseIf($$[$0-5], [], $$[$0], this._$.first_line,this._$.first_column+1); 
break;
case 84:
 this.$ = new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 85:
 this.$ = new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line, this._$.first_column+1); 
break;
case 86:
 this.$ = new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 87:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de sentencia Swtich no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 88:
 $$[$0-4].push(new INSTRUCCION.nuevoCaso($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1)); this.$=$$[$0-4]; 
break;
case 89:
 $$[$0-3].push(new INSTRUCCION.nuevoCaso($$[$0-1], [], this._$.first_line, this._$.first_column+1)); this.$=$$[$0-3]; 
break;
case 90:
 this.$ = [new INSTRUCCION.nuevoCaso($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1)]; 
break;
case 91:
 this.$ = [new INSTRUCCION.nuevoCaso($$[$0-1], [], this._$.first_line, this._$.first_column+1)]; 
break;
case 92:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de caso no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 93:
 this.$ = new INSTRUCCION.nuevoCaso(null, $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 94:
 this.$ = new INSTRUCCION.nuevoCaso(null, [], this._$.first_line, this._$.first_column+1); 
break;
case 95:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 96:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 97:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 98:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-2], linea: this._$.first_line, columna: this._$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
  			tipo: 'SUMA',
  			linea: this._$.first_line,
  			columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 99:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-2], linea: this._$.first_line, columna: this._$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
  			tipo: 'RESTA',
  			linea: this._$.first_line,
  			columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 100:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de variable no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 101:
 this.$ = INSTRUCCION.nuevoVector($$[$0-10], $$[$0-4], $$[$0-9], $$[$0-2], null, null, this._$.first_line, this._$.first_column+1) 
break;
case 102:
 this.$ = INSTRUCCION.nuevoVector($$[$0-8], null, $$[$0-7], null, $$[$0-2], null, this._$.first_line, this._$.first_column+1) 
break;
case 103:
 this.$ = INSTRUCCION.modificacionVector($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 104:
 this.$ = INSTRUCCION.nuevoVector($$[$0-6], null, $$[$0-5], null, null, $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 105:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de vector no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 106:
 this.$ = INSTRUCCION.nuevaLista($$[$0-8], $$[$0-2], $$[$0-7], null, this._$.first_line, this._$.first_column+1) 
break;
case 107:
 this.$ = INSTRUCCION.modificacionLista($$[$0-4], null, $$[$0-2], this._$.first_line, this._$.first_column+1) 
break;
case 108:
 this.$ = INSTRUCCION.modificacionLista($$[$0-6], $$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column+1) 
break;
case 109:
 this.$ = INSTRUCCION.nuevaLista($$[$0-4], null, $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 110:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de lista no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 111:
this.$ = $$[$0-1]
break;
case 112:
this.$ = $$[$0]
break;
case 113:
this.$ = TIPO_DATO.CADENA
break;
case 114:
this.$ = TIPO_DATO.ENTERO
break;
case 115:
this.$ = TIPO_DATO.DOBLE
break;
case 116:
this.$ = TIPO_DATO.CARACTER
break;
case 117:
this.$ = TIPO_DATO.BOOLEANO
break;
case 118:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 119:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 120:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 121:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 122:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 123:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 124:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1);
break;
case 126:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 127:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 128:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 129:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 130:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 131:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 132:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 133:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 134:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 135:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1)
break;
case 136:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim().substring(1, $$[$0].length - 1), TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1)
break;
case 137: case 138:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.BOOLEANO, this._$.first_line,this._$.first_column+1)
break;
case 139:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1)
break;
case 140:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.DOBLE, this._$.first_line,this._$.first_column+1)
break;
case 141:
 this.$ = INSTRUCCION.accesoLista($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 142:
 this.$ = INSTRUCCION.accesoVector($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 143:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 148:
 this.$ = new INSTRUCCION.nuevoCasteo($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1) 
break;
case 149:
 this.$ = new INSTRUCCION.nuevoTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1) 
break;
case 158:
this.$ = new INSTRUCCION.nuevoImprimir($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 159:
this.$ = new INSTRUCCION.nuevoImprimir(INSTRUCCION.nuevoValor("", TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1), this._$.first_line,this._$.first_column+1)
break;
case 160:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Llamada a función imprimir no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 161:
this.$ = new INSTRUCCION.toLower($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 162:
this.$ = new INSTRUCCION.toUpper($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 163:
this.$ = new INSTRUCCION.nuevoLength($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 164:
this.$ = new INSTRUCCION.nuevoTruncate($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 165:
this.$ = new INSTRUCCION.nuevoRound($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 166:
this.$ = new INSTRUCCION.nuevoTypeOf($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 167:
this.$ = new INSTRUCCION.nuevoToString($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 168:
this.$ = new INSTRUCCION.nuevoToCharArray($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 169:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1)
break;
case 170:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-2], [], this._$.first_line, this._$.first_column+1)
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,23:12,24:$V1,25:$V2,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},{1:[3]},{5:[1,25],6:26,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,23:12,24:$V1,25:$V2,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},{5:[1,27]},o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),{2:[1,29],14:[1,28],21:[1,30]},{2:[1,32],14:[1,31]},{2:[1,34],14:[1,33]},{26:[1,35]},{21:$Vc,47:$Vd,48:$Ve,49:$Vf},{15:[1,40]},{15:[1,41]},o($Vg,[2,112]),{66:[1,42]},o($Vg,[2,113]),o($Vg,[2,114]),o($Vg,[2,115]),o($Vg,[2,116]),o($Vg,[2,117]),{1:[2,1]},o($Vb,[2,3]),{1:[2,2]},{15:[1,43],21:[1,44],27:$Vh,47:$Vi},{19:[1,47],27:$Vj},{22:[1,49]},{15:[1,50],47:$Vk},{19:[1,52],27:$Vl},{15:[1,54]},{19:[1,55]},{2:[1,57],14:[1,56]},{14:$Vm,15:$Vn,35:72,39:58,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{27:[1,90]},{27:[1,91]},{14:$Vm,15:$Vn,35:72,39:92,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:[1,93]},{14:[1,94]},{13:95,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},{13:99,16:[1,96],20:97,23:100,30:98,65:$V3,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},{22:[1,101]},{14:$Vm,15:$Vn,35:72,39:102,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VF,[2,96]),o($Vb,[2,23]),o($VF,[2,100]),{2:[1,103]},{13:99,16:[1,104],20:105,23:100,30:98,65:$V3,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},{14:$Vm,15:$Vn,35:72,39:107,64:[1,106],77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($Vb,[2,25]),o($VG,[2,110]),{13:99,16:[1,108],20:109,23:100,30:98,65:$V3,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},o($Vb,[2,30]),{15:[1,110]},{27:[1,111]},{27:[1,112],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{14:$Vm,15:$Vn,35:72,39:128,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{13:130,14:$Vm,15:$Vn,35:72,39:129,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:131,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VW,[2,135]),o($VW,[2,136]),o($VW,[2,137]),o($VW,[2,138]),o($VW,[2,139]),o($VW,[2,140]),{15:[1,132]},o($VW,[2,143],{15:$VX,21:[1,133]}),o($VW,[2,144]),o($VW,[2,145]),o($VW,[2,146]),o($VW,[2,147]),o($VW,[2,150]),o($VW,[2,151]),o($VW,[2,152]),o($VW,[2,153]),o($VW,[2,154]),o($VW,[2,155]),o($VW,[2,156]),o($VW,[2,157]),{15:[1,135]},{15:[1,136]},{15:[1,137]},{15:[1,138]},{15:[1,139]},{15:[1,140]},{15:[1,141]},{15:[1,142]},o($VF,[2,98]),o($VF,[2,99]),{22:[1,143],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{29:[1,144]},{29:[1,145]},{67:[1,146]},{17:[1,147]},{16:[1,148],29:$VY},o($VZ,[2,35]),{14:[1,150]},{14:[1,151]},{15:[1,152],47:$V_},{27:[1,154],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{19:[1,155],27:$V$},{17:[1,157]},{16:[1,158],29:$VY},{65:[1,159]},{27:[1,160],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{17:[1,161]},{16:[1,162],29:$VY},{14:$Vm,15:$Vn,16:[1,163],28:164,35:72,39:166,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:165},o($Vb,[2,33]),o($VF,[2,97]),{14:$Vm,15:$Vn,35:72,39:167,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:168,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:169,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:170,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:171,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:172,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:173,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:174,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:175,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:176,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:177,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:178,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:179,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:180,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:181,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VW,[2,124]),{16:[1,182],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{16:[1,183]},o($V01,[2,134],{66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS}),{14:[1,184]},{14:$Vm,15:$Vn,35:72,39:185,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,16:[1,187],28:186,35:72,39:166,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:165},{14:$Vm,15:$Vn,35:72,39:188,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:189,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:190,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:191,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:192,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:193,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:194,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:195,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{47:[1,196]},{14:$Vm,15:$Vn,35:72,39:197,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:198,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($V11,[2,111]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:199,19:[1,200],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{17:[1,231]},{13:99,23:100,30:232,65:$V3,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},o($VZ,[2,38],{21:[1,233]}),o($VZ,[2,37]),{13:99,16:[1,234],20:235,23:100,30:98,65:$V3,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},{14:$Vm,15:$Vn,17:[1,237],35:72,39:238,64:[1,236],77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VF,[2,95]),o($Vb,[2,24]),o($VG,[2,105]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:239,19:[1,240],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{17:[1,241]},{66:[1,242]},o($VG,[2,109]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:243,19:[1,244],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{17:[1,245]},{27:[1,246]},{16:[1,247],29:$Vd1},o($Ve1,[2,172]),o($Ve1,[2,173],{66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV}),o($Vf1,[2,118],{78:$VL,79:$VM,80:$VN,81:$VO}),o($Vf1,[2,119],{78:$VL,79:$VM,80:$VN,81:$VO}),o($Vg1,[2,120],{80:$VN}),o($Vg1,[2,121],{80:$VN}),o($VW,[2,122]),o($Vg1,[2,123],{80:$VN}),o($Vh1,[2,126],{76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($Vh1,[2,127],{76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($Vh1,[2,128],{76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($Vh1,[2,129],{76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($Vh1,[2,130],{76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($Vh1,[2,131],{76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o([16,19,22,27,29,62,86,99],[2,132],{66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,87:$VU}),o($V01,[2,133],{66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS}),{62:[1,249],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},o($VW,[2,125]),{14:$Vm,15:$Vn,35:72,39:250,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{29:[1,251]},{22:[1,252],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{16:[1,253],29:$Vd1},o($VW,[2,170]),{16:[1,254],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{16:[1,255],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{16:[1,256],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{16:[1,257],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{16:[1,258],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{16:[1,259],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{16:[1,260],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{16:[1,261],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{14:$Vm,15:$Vn,35:72,39:262,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{16:[1,263],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{29:[1,264],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,265],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vb,[2,12]),o($Vi1,[2,40]),o($Vi1,[2,41]),o($Vi1,[2,42]),o($Vi1,[2,43]),o($Vi1,[2,44]),o($Vi1,[2,45]),o($Vi1,[2,46]),{27:[1,267]},o($Vi1,[2,48]),{19:[1,269],27:[1,268]},{2:$Vj1,14:[1,270],21:[1,272]},{15:$VX,21:$Vc,47:$Vd,48:$Ve,49:$Vf},o($Vi1,[2,70]),o($Vi1,[2,71]),o($Vi1,[2,55]),o($Vi1,[2,56]),o($Vi1,[2,57]),{2:[1,274],14:[1,273]},{27:[1,275]},{14:$Vm,15:$Vn,27:[1,277],35:72,39:276,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{27:[1,278]},{2:[1,280],15:[1,279]},o($Vi1,[2,72]),o($Vi1,[2,73]),o($Vi1,[2,74]),{2:[1,281],15:[1,282]},{2:[1,284],15:[1,283]},{2:[1,286],15:[1,285]},{2:[1,288],15:[1,287]},{2:[1,290],17:[1,289]},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:291,19:[1,292],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($VZ,[2,34]),{22:[1,293]},{17:[1,294]},{16:[1,295],29:$VY},{13:296,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},{14:$Vm,15:$Vn,28:297,35:72,39:166,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:165},{27:[1,298],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,299],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vb,[2,20]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:300,19:[1,301],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{13:302,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,303],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vb,[2,27]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:304,19:[1,305],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vb,[2,31]),{27:[1,306]},{14:$Vm,15:$Vn,35:72,39:166,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:307},{14:$Vm,15:$Vn,35:72,39:308,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VW,[2,148]),{14:$Vm,15:$Vn,35:72,39:309,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VW,[2,142]),o($VW,[2,169]),o($VW,[2,161]),o($VW,[2,162]),o($VW,[2,163]),o($VW,[2,164]),o($VW,[2,165]),o($VW,[2,166]),o($VW,[2,167]),o($VW,[2,168]),{27:[1,310],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{27:[1,311]},{14:$Vm,15:$Vn,35:72,39:312,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($Vb,[2,11]),o($Vi1,[2,39]),o($Vi1,[2,47]),o($Vi1,[2,49]),o($Vi1,[2,50]),{21:[1,313],27:$Vh,47:$Vi},{27:$Vj},{22:[1,314]},{47:$Vk},{27:$Vl},o($Vi1,[2,51]),{27:[1,315],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},o($Vi1,[2,54]),o($Vi1,[2,53]),{14:$Vm,15:$Vn,16:[1,317],35:72,39:316,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{27:[1,318]},{19:[1,319]},{14:$Vm,15:$Vn,35:72,39:320,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{14:$Vm,15:$Vn,35:72,39:321,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{19:[1,322]},{14:$Vm,15:$Vn,35:72,39:323,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{19:[1,324]},{10:325,13:326,14:[1,327],70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va},{19:[1,328]},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:329,19:[1,330],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{27:[1,331]},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,332],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vb,$V11),o($VZ,[2,36]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:333,19:[1,334],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{17:[1,335]},{21:[1,336]},{19:[1,337],29:$Vd1},o($VG,[2,104]),o($Vb,[2,19]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,338],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vb,[2,22]),{67:[1,339]},o($Vb,[2,26]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,340],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vb,[2,29]),o($Vb,[2,32]),o($Ve1,[2,171]),o([16,19,22,27,29,62,99],[2,149],{66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU}),{16:[1,341],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},o($VG,[2,103]),o($VG,[2,107]),{16:[1,342],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{22:[1,343]},{2:[1,344]},o($Vi1,[2,52]),{16:[1,345],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{27:[1,346]},o($Vi1,[2,160]),o($Vi1,[2,75]),{16:[1,347],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{16:[1,348],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},o($Vi1,[2,87]),{16:[1,349],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},o($Vi1,[2,60]),{14:$Vm,15:$Vn,35:72,39:350,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{2:$Vj1,14:[1,351]},{47:$Vd,48:$Ve,49:$Vf},o($Vi1,[2,63]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,352],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{44:[1,353]},o($Vi1,[2,69]),o($Vb,[2,13]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,354],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vb,[2,16]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:355,19:[1,356],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{14:$Vm,15:$Vn,35:72,39:357,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{27:[1,358]},o($Vb,[2,21]),{27:[1,359]},o($Vb,[2,28]),o($VW,[2,141]),{27:[1,360]},{47:$V_},{27:$V$},{27:[1,361]},o($Vi1,[2,159]),{17:[1,362]},{17:[1,363]},{17:[1,364]},{27:[1,365],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{27:$Vh,47:$Vi},{44:[1,366]},{15:[1,367]},o($Vb,[2,15]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,368],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vb,[2,18]),{22:[1,369],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},o($VG,[2,102]),o($VG,[2,106]),o($VG,[2,108]),o($Vi1,[2,158]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:370,19:[1,371],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{59:372,60:373,61:[1,374],63:$Vk1},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:376,19:[1,377],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{14:[1,379],46:378},{15:[1,380]},{14:$Vm,15:$Vn,35:72,39:381,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($Vb,[2,17]),{27:[1,382]},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,383],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vi1,[2,77],{57:[1,384]}),{19:[1,386],60:385,61:[1,387],63:$Vk1},{19:[1,388]},{2:[1,390],14:$Vm,15:$Vn,35:72,39:389,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{62:[1,391]},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,392],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vi1,[2,59]),{16:[1,393]},{47:[1,394],48:[1,395],49:[1,396]},{14:$Vm,15:$Vn,35:72,39:397,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{16:[1,398],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},o($VG,[2,101]),o($Vi1,[2,76],{57:[1,399]}),{17:[1,400],51:401,53:223,54:224,55:225,56:$Va1},{19:[1,402]},o($Vi1,[2,85]),{14:$Vm,15:$Vn,35:72,39:403,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($Vi1,[2,86]),{62:[1,404],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{62:[1,405]},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:406,19:[2,94],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vi1,[2,58]),{17:[1,407]},{14:$Vm,15:$Vn,35:72,39:408,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:70,97:71,98:73,100:74,101:75,102:76,103:77,104:78,105:79,106:80,107:81,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{16:[2,65]},{16:[2,66]},{16:[1,409],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{27:[1,410]},{17:[1,411],51:412,53:223,54:224,55:225,56:$Va1},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:413,19:[1,414],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vi1,[2,83]),o($Vi1,[2,84]),{62:[1,415],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},o($Vl1,[2,91],{70:18,31:201,10:202,32:203,33:204,11:205,12:206,34:207,35:208,36:209,13:211,51:213,52:214,41:215,42:216,43:217,23:218,53:223,54:224,55:225,18:416,2:$V21,14:$V31,37:$V41,38:$V51,40:$V61,44:$V71,45:$V81,50:$V91,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1}),o($Vl1,[2,92]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[2,93],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:417,19:[1,418],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},{16:[2,64],66:$VH,67:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,99:$VV},{27:[1,419]},o($Vi1,[2,68]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,18:420,19:[1,421],23:218,31:201,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vi1,[2,82]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,422],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vi1,[2,81]),o($Vl1,[2,89],{70:18,31:201,10:202,32:203,33:204,11:205,12:206,34:207,35:208,36:209,13:211,51:213,52:214,41:215,42:216,43:217,23:218,53:223,54:224,55:225,18:423,2:$V21,14:$V31,37:$V41,38:$V51,40:$V61,44:$V71,45:$V81,50:$V91,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1}),o($Vl1,[2,90],{70:18,10:202,32:203,33:204,11:205,12:206,34:207,35:208,36:209,13:211,51:213,52:214,41:215,42:216,43:217,23:218,53:223,54:224,55:225,31:266,2:$V21,14:$V31,37:$V41,38:$V51,40:$V61,44:$V71,45:$V81,50:$V91,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1}),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,424],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vi1,[2,62]),o($Vi1,[2,67]),{2:$V21,10:202,11:205,12:206,13:211,14:$V31,19:[1,425],23:218,31:266,32:203,33:204,34:207,35:208,36:209,37:$V41,38:$V51,40:$V61,41:215,42:216,43:217,44:$V71,45:$V81,50:$V91,51:213,52:214,53:223,54:224,55:225,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,70:18,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1},o($Vi1,[2,80]),o($Vi1,[2,79]),o($Vl1,[2,88],{70:18,10:202,32:203,33:204,11:205,12:206,34:207,35:208,36:209,13:211,51:213,52:214,41:215,42:216,43:217,23:218,53:223,54:224,55:225,31:266,2:$V21,14:$V31,37:$V41,38:$V51,40:$V61,44:$V71,45:$V81,50:$V91,56:$Va1,58:$Vb1,65:$V3,68:$V4,69:$V5,71:$V6,72:$V7,73:$V8,74:$V9,75:$Va,108:$Vc1}),o($Vi1,[2,61]),o($Vi1,[2,78])],
defaultActions: {25:[2,1],27:[2,2],395:[2,65],396:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var cadena = '';
	var errores = [];

	const TIPO_OPERACION	= require('./Controller/Principales/TOperaciones');
	const TIPO_VALOR 		= require('./Controller/Principales/TValores');
	const TIPO_DATO			= require('./Controller/Principales/Tipos');
	const INSTRUCCION		= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Espacios en blanco
break;
case 1:// Comentario de una linea
break;
case 2:// Comentario Multilinea
break;
case 3:return 73
break;
case 4:return 72
break;
case 5:return 75
break;
case 6:return 74
break;
case 7:return 71
break;
case 8:return 64
break;
case 9:return 65
break;
case 10:return 68
break;
case 11:return 95
break;
case 12:return 69
break;
case 13:return 56
break;
case 14:return 57
break;
case 15:return 58
break;
case 16:return 61
break;
case 17:return 37
break;
case 18:return 44
break;
case 19:return 45
break;
case 20:return 50
break;
case 21:return 63
break;
case 22:return 40
break;
case 23:return 38
break;
case 24:return 24
break;
case 25:return 48
break;
case 26:return 49
break;
case 27:return 108
break;
case 28:return 109
break;
case 29:return 110
break;
case 30:return 111
break;
case 31:return 112
break;
case 32:return 113
break;
case 33:return 114
break;
case 34:return 115
break;
case 35:return 116
break;
case 36:return 25
break;
case 37:return 26
break;
case 38:return 91
break;
case 39:return 92
break;
case 40:return 86
break;
case 41:return 87
break;
case 42:return 83
break;
case 43:return 82
break;
case 44:return 88
break;
case 45:return 47
break;
case 46:return 84
break;
case 47:return 85
break;
case 48:return 67
break;
case 49:return 66
break;
case 50:return 29
break;
case 51:return 27
break;
case 52:return 'PUNTO'
break;
case 53:return 62
break;
case 54:return 17
break;
case 55:return 19
break;
case 56:return 78
break;
case 57:return 79
break;
case 58:return 77
break;
case 59:return 76
break;
case 60:return 80
break;
case 61:return 81
break;
case 62:return 15
break;
case 63:return 16
break;
case 64:return 99
break;
case 65:return 21
break;
case 66:return 22
break;
case 67:return 14
break;
case 68:return 90
break;
case 69:return 94
break;
case 70:return 93
break;
case 71: cadena = ''; this.begin("string"); 
break;
case 72: cadena += yy_.yytext; 
break;
case 73: cadena += "\""; 
break;
case 74: cadena += "\n"; 
break;
case 75: cadena += " ";  
break;
case 76: cadena += "\t"; 
break;
case 77: cadena += "\\"; 
break;
case 78: cadena += "\'"; 
break;
case 79: cadena += "\r"; 
break;
case 80: yy_.yytext = cadena; this.popState(); return 89; 
break;
case 81:return 5
break;
case 82: errores.push({ tipo: "Léxico", error: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:dynamiclist\b)/i,/^(?:append\b)/i,/^(?:getvalue\b)/i,/^(?:setvalue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:writeline\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\.)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[72,73,74,75,76,77,78,79,80],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}