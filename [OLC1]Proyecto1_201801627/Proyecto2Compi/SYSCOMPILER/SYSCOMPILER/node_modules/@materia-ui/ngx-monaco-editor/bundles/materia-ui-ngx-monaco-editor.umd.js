(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@materia-ui/ngx-monaco-editor', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/forms'], factory) :
    (global = global || self, factory((global['materia-ui'] = global['materia-ui'] || {}, global['materia-ui']['ngx-monaco-editor'] = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.ng.forms));
}(this, (function (exports, core, rxjs, operators, forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /// <reference path="monaco.d.ts" />
    var MONACO_PATH = 'MONACO_PATH';

    var MonacoEditorLoaderService = /** @class */ (function () {
        function MonacoEditorLoaderService(ngZone, monacoPathConfig) {
            var _this = this;
            this.ngZone = ngZone;
            this.monacoPathConfig = monacoPathConfig;
            this.isMonacoLoaded$ = new rxjs.BehaviorSubject(false);
            this._monacoPath = 'assets/monaco-editor/min/vs';
            if (window.monacoEditorAlreadyInitialized) {
                ngZone.run(function () { return _this.isMonacoLoaded$.next(true); });
                return;
            }
            window.monacoEditorAlreadyInitialized = true;
            if (this.monacoPathConfig) {
                this.monacoPath = this.monacoPathConfig;
            }
            this.loadMonaco();
        }
        Object.defineProperty(MonacoEditorLoaderService.prototype, "monacoPath", {
            set: function (value) {
                if (value) {
                    this._monacoPath = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        MonacoEditorLoaderService.prototype.loadMonaco = function () {
            var _this = this;
            var onGotAmdLoader = function () {
                var vsPath = _this._monacoPath;
                window.amdRequire = window.require;
                var isElectron = !!_this.nodeRequire;
                if (isElectron) {
                    // Restore node require in window
                    window.require = _this.nodeRequire;
                    var path = window.require('path');
                    vsPath = path.resolve(window.__dirname, _this._monacoPath);
                }
                window.amdRequire.config({ paths: { vs: vsPath } });
                // Load monaco
                window.amdRequire(['vs/editor/editor.main'], function () {
                    _this.ngZone.run(function () { return _this.isMonacoLoaded$.next(true); });
                });
            };
            // Check if AMD loader already available
            var isAmdLoaderAvailable = !!window.amdRequire;
            if (isAmdLoaderAvailable) {
                return onGotAmdLoader();
            }
            var isElectron = !!window.require;
            if (isElectron) {
                this.addElectronFixScripts();
                this.nodeRequire = window.require;
            }
            var loaderScript = document.createElement('script');
            loaderScript.type = 'text/javascript';
            loaderScript.src = this._monacoPath + "/loader.js";
            loaderScript.addEventListener('load', onGotAmdLoader);
            document.body.appendChild(loaderScript);
        };
        MonacoEditorLoaderService.prototype.addElectronFixScripts = function () {
            var electronFixScript = document.createElement('script');
            // workaround monaco-css not understanding the environment
            var inlineScript = document.createTextNode('self.module = undefined;');
            // workaround monaco-typescript not understanding the environment
            var inlineScript2 = document.createTextNode('self.process.browser = true;');
            electronFixScript.appendChild(inlineScript);
            electronFixScript.appendChild(inlineScript2);
            document.body.appendChild(electronFixScript);
        };
        MonacoEditorLoaderService.ctorParameters = function () { return [
            { type: core.NgZone },
            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MONACO_PATH,] }] }
        ]; };
        MonacoEditorLoaderService.ɵprov = core.ɵɵdefineInjectable({ factory: function MonacoEditorLoaderService_Factory() { return new MonacoEditorLoaderService(core.ɵɵinject(core.NgZone), core.ɵɵinject("MONACO_PATH", 8)); }, token: MonacoEditorLoaderService, providedIn: "root" });
        MonacoEditorLoaderService = __decorate([
            core.Injectable({ providedIn: 'root' }),
            __param(1, core.Optional()), __param(1, core.Inject(MONACO_PATH)),
            __metadata("design:paramtypes", [core.NgZone, String])
        ], MonacoEditorLoaderService);
        return MonacoEditorLoaderService;
    }());

    var MonacoEditorLoaderDirective = /** @class */ (function () {
        function MonacoEditorLoaderDirective(templateRef, viewContainer, monacoEditorLoaderService) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
            this.monacoEditorLoaderService = monacoEditorLoaderService;
            this.isMonacoLoaded$ = this.monacoEditorLoaderService.isMonacoLoaded$.asObservable();
            this.destroyed$ = new rxjs.Subject();
        }
        MonacoEditorLoaderDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.isMonacoLoaded$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (loaded) {
                if (!loaded) {
                    return _this.viewContainer.clear();
                }
                _this.viewContainer.createEmbeddedView(_this.templateRef);
            });
        };
        MonacoEditorLoaderDirective.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        MonacoEditorLoaderDirective.ctorParameters = function () { return [
            { type: core.TemplateRef },
            { type: core.ViewContainerRef },
            { type: MonacoEditorLoaderService }
        ]; };
        MonacoEditorLoaderDirective = __decorate([
            core.Directive({ selector: '[ngxLoadMonacoEditor]' }),
            __metadata("design:paramtypes", [core.TemplateRef,
                core.ViewContainerRef,
                MonacoEditorLoaderService])
        ], MonacoEditorLoaderDirective);
        return MonacoEditorLoaderDirective;
    }());

    var MonacoEditorComponent = /** @class */ (function () {
        function MonacoEditorComponent(monacoLoader) {
            this.monacoLoader = monacoLoader;
            this.init = new core.EventEmitter();
            this.propagateChange = function (_) { };
        }
        MonacoEditorComponent_1 = MonacoEditorComponent;
        Object.defineProperty(MonacoEditorComponent.prototype, "model", {
            get: function () {
                return this.editor && this.editor.getModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MonacoEditorComponent.prototype, "modelMarkers", {
            get: function () {
                return this.model && monaco.editor.getModelMarkers({
                    resource: this.model.uri
                });
            },
            enumerable: true,
            configurable: true
        });
        MonacoEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.monacoLoader.isMonacoLoaded$.pipe(operators.filter(function (isLoaded) { return isLoaded; }), operators.take(1)).subscribe(function () {
                _this.initEditor();
            });
        };
        MonacoEditorComponent.prototype.ngOnChanges = function (changes) {
            if (this.editor && changes.options && !changes.options.firstChange) {
                var _a = changes.options.currentValue, toLanguage = _a.language, toTheme = _a.theme, options = __rest(_a, ["language", "theme"]);
                var _b = changes.options.previousValue, fromLanguage = _b.language, fromTheme = _b.theme;
                if (fromLanguage !== toLanguage) {
                    monaco.editor.setModelLanguage(this.editor.getModel(), this.options && this.options.language ? this.options.language : 'text');
                }
                if (fromTheme !== toTheme) {
                    monaco.editor.setTheme(toTheme);
                }
                this.editor.updateOptions(options);
            }
            if (this.editor && changes.uri) {
                var toUri_1 = changes.uri.currentValue;
                var fromUri = changes.uri.previousValue;
                if (fromUri && !toUri_1 || !fromUri && toUri_1 || toUri_1 && fromUri && toUri_1.path !== fromUri.path) {
                    var value = this.editor.getValue();
                    if (this.modelUriInstance) {
                        this.modelUriInstance.dispose();
                    }
                    var existingModel = void 0;
                    if (toUri_1) {
                        existingModel = monaco.editor.getModels().find(function (model) { return model.uri.path === toUri_1.path; });
                    }
                    this.modelUriInstance = existingModel ? existingModel : monaco.editor.createModel(value, this.options.language || 'text', this.uri);
                    this.editor.setModel(this.modelUriInstance);
                }
            }
        };
        MonacoEditorComponent.prototype.writeValue = function (value) {
            this.value = value;
            if (this.editor && value) {
                this.editor.setValue(value);
            }
            else if (this.editor) {
                this.editor.setValue('');
            }
        };
        MonacoEditorComponent.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        MonacoEditorComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        MonacoEditorComponent.prototype.validate = function () {
            return !this.parsedError ? null : {
                monaco: {
                    value: this.parsedError.split('|'),
                }
            };
        };
        MonacoEditorComponent.prototype.registerOnValidatorChange = function (fn) {
            this.onErrorStatusChange = fn;
        };
        MonacoEditorComponent.prototype.initEditor = function () {
            var options = {
                value: [this.value].join('\n'),
                language: 'text',
                automaticLayout: true,
                scrollBeyondLastLine: false,
                theme: 'vc'
            };
            this.editor = monaco.editor.create(this.editorContent.nativeElement, this.options ? __assign(__assign({}, options), this.options) : options);
            this.registerEditorListeners();
            this.init.emit(this.editor);
        };
        MonacoEditorComponent.prototype.registerEditorListeners = function () {
            var _this = this;
            this.editor.onDidChangeModelContent(function () {
                _this.propagateChange(_this.editor.getValue());
            });
            this.editor.onDidChangeModelDecorations(function () {
                var currentParsedError = _this.modelMarkers.map(function (_a) {
                    var message = _a.message;
                    return message;
                }).join('|');
                var hasValidationStatusChanged = _this.parsedError !== currentParsedError;
                if (hasValidationStatusChanged) {
                    _this.parsedError = currentParsedError;
                    _this.onErrorStatusChange();
                }
            });
            this.editor.onDidBlurEditorText(function () {
                _this.onTouched();
            });
        };
        MonacoEditorComponent.prototype.ngOnDestroy = function () {
            if (this.editor) {
                this.editor.dispose();
            }
        };
        var MonacoEditorComponent_1;
        MonacoEditorComponent.ctorParameters = function () { return [
            { type: MonacoEditorLoaderService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MonacoEditorComponent.prototype, "options", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MonacoEditorComponent.prototype, "uri", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], MonacoEditorComponent.prototype, "init", void 0);
        __decorate([
            core.ViewChild('editor', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], MonacoEditorComponent.prototype, "editorContent", void 0);
        MonacoEditorComponent = MonacoEditorComponent_1 = __decorate([
            core.Component({
                selector: 'ngx-monaco-editor',
                template: "<div #container class=\"editor-container\" fxFlex>\n\t\t<div\n\t\t\t#editor\n\t\t\tclass=\"monaco-editor\"\n\t\t></div>\n</div>",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return MonacoEditorComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return MonacoEditorComponent_1; }),
                        multi: true,
                    }
                ],
                styles: ["\n.monaco-editor {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n}\n.editor-container {\n\toverflow: hidden;\n\tposition: relative;\n\tdisplay: table;\n\twidth: 100%;\n  height: 100%;\n  min-width: 0;\n}"]
            }),
            __metadata("design:paramtypes", [MonacoEditorLoaderService])
        ], MonacoEditorComponent);
        return MonacoEditorComponent;
    }());

    var MonacoDiffEditorComponent = /** @class */ (function () {
        function MonacoDiffEditorComponent(monacoLoader) {
            this.monacoLoader = monacoLoader;
            this.init = new core.EventEmitter();
        }
        MonacoDiffEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.container = this.editorContent.nativeElement;
            this.monacoLoader.isMonacoLoaded$.pipe(operators.filter(function (isLoaded) { return isLoaded; }), operators.take(1)).subscribe(function () {
                _this.initMonaco();
            });
        };
        MonacoDiffEditorComponent.prototype.ngOnChanges = function (changes) {
            if (this.editor && ((changes.code && !changes.code.firstChange) || (changes.modified && !changes.modified.firstChange))) {
                var modified = monaco.editor.createModel(this.modified);
                var original = monaco.editor.createModel(this.original);
                this.editor.setModel({
                    original: original,
                    modified: modified
                });
            }
            if (this.editor &&
                changes.options &&
                !changes.options.firstChange) {
                if (changes.options.previousValue.theme !== changes.options.currentValue.theme) {
                    monaco.editor.setTheme(changes.options.currentValue.theme);
                }
                this.editor.updateOptions(changes.options.currentValue);
            }
        };
        MonacoDiffEditorComponent.prototype.initMonaco = function () {
            var opts = {
                readOnly: true,
                automaticLayout: true,
                theme: 'vc'
            };
            if (this.options) {
                opts = Object.assign({}, opts, this.options);
            }
            this.editor = monaco.editor.createDiffEditor(this.container, opts);
            var original = monaco.editor.createModel(this.original);
            var modified = monaco.editor.createModel(this.modified);
            this.editor.setModel({
                original: original,
                modified: modified
            });
            this.editor.layout();
            this.init.emit(this.editor);
        };
        MonacoDiffEditorComponent.prototype.ngOnDestroy = function () {
            if (this.editor) {
                this.editor.dispose();
            }
        };
        MonacoDiffEditorComponent.ctorParameters = function () { return [
            { type: MonacoEditorLoaderService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], MonacoDiffEditorComponent.prototype, "original", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], MonacoDiffEditorComponent.prototype, "modified", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MonacoDiffEditorComponent.prototype, "options", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], MonacoDiffEditorComponent.prototype, "init", void 0);
        __decorate([
            core.ViewChild('diffEditor', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], MonacoDiffEditorComponent.prototype, "editorContent", void 0);
        MonacoDiffEditorComponent = __decorate([
            core.Component({
                selector: 'ngx-monaco-diff-editor',
                template: "<div #container class=\"editor-container\" fxFlex>\n\t\t<div\n\t\t\t#diffEditor\n\t\t\tclass=\"monaco-editor\"\n\t\t></div>\n</div>",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                styles: ["\n.monaco-editor {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n}\n.editor-container {\n\toverflow: hidden;\n\tposition: relative;\n\tdisplay: table;\n\twidth: 100%;\n  height: 100%;\n  min-width: 0;\n}"]
            }),
            __metadata("design:paramtypes", [MonacoEditorLoaderService])
        ], MonacoDiffEditorComponent);
        return MonacoDiffEditorComponent;
    }());

    var MonacoEditorModule = /** @class */ (function () {
        function MonacoEditorModule() {
        }
        MonacoEditorModule = __decorate([
            core.NgModule({
                imports: [],
                declarations: [
                    MonacoEditorLoaderDirective,
                    MonacoEditorComponent,
                    MonacoDiffEditorComponent
                ],
                exports: [
                    MonacoEditorLoaderDirective,
                    MonacoEditorComponent,
                    MonacoDiffEditorComponent
                ],
                entryComponents: [MonacoEditorComponent, MonacoDiffEditorComponent]
            })
        ], MonacoEditorModule);
        return MonacoEditorModule;
    }());

    exports.MONACO_PATH = MONACO_PATH;
    exports.MonacoDiffEditorComponent = MonacoDiffEditorComponent;
    exports.MonacoEditorComponent = MonacoEditorComponent;
    exports.MonacoEditorLoaderDirective = MonacoEditorLoaderDirective;
    exports.MonacoEditorLoaderService = MonacoEditorLoaderService;
    exports.MonacoEditorModule = MonacoEditorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=materia-ui-ngx-monaco-editor.umd.js.map
