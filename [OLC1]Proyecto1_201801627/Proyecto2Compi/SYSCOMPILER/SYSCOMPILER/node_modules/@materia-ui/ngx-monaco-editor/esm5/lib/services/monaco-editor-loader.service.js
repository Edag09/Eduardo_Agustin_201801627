import { __decorate, __metadata, __param } from "tslib";
import { Injectable, NgZone, Optional, Inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { MONACO_PATH } from '../interfaces';
import * as i0 from "@angular/core";
var MonacoEditorLoaderService = /** @class */ (function () {
    function MonacoEditorLoaderService(ngZone, monacoPathConfig) {
        var _this = this;
        this.ngZone = ngZone;
        this.monacoPathConfig = monacoPathConfig;
        this.isMonacoLoaded$ = new BehaviorSubject(false);
        this._monacoPath = 'assets/monaco-editor/min/vs';
        if (window.monacoEditorAlreadyInitialized) {
            ngZone.run(function () { return _this.isMonacoLoaded$.next(true); });
            return;
        }
        window.monacoEditorAlreadyInitialized = true;
        if (this.monacoPathConfig) {
            this.monacoPath = this.monacoPathConfig;
        }
        this.loadMonaco();
    }
    Object.defineProperty(MonacoEditorLoaderService.prototype, "monacoPath", {
        set: function (value) {
            if (value) {
                this._monacoPath = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    MonacoEditorLoaderService.prototype.loadMonaco = function () {
        var _this = this;
        var onGotAmdLoader = function () {
            var vsPath = _this._monacoPath;
            window.amdRequire = window.require;
            var isElectron = !!_this.nodeRequire;
            if (isElectron) {
                // Restore node require in window
                window.require = _this.nodeRequire;
                var path = window.require('path');
                vsPath = path.resolve(window.__dirname, _this._monacoPath);
            }
            window.amdRequire.config({ paths: { vs: vsPath } });
            // Load monaco
            window.amdRequire(['vs/editor/editor.main'], function () {
                _this.ngZone.run(function () { return _this.isMonacoLoaded$.next(true); });
            });
        };
        // Check if AMD loader already available
        var isAmdLoaderAvailable = !!window.amdRequire;
        if (isAmdLoaderAvailable) {
            return onGotAmdLoader();
        }
        var isElectron = !!window.require;
        if (isElectron) {
            this.addElectronFixScripts();
            this.nodeRequire = window.require;
        }
        var loaderScript = document.createElement('script');
        loaderScript.type = 'text/javascript';
        loaderScript.src = this._monacoPath + "/loader.js";
        loaderScript.addEventListener('load', onGotAmdLoader);
        document.body.appendChild(loaderScript);
    };
    MonacoEditorLoaderService.prototype.addElectronFixScripts = function () {
        var electronFixScript = document.createElement('script');
        // workaround monaco-css not understanding the environment
        var inlineScript = document.createTextNode('self.module = undefined;');
        // workaround monaco-typescript not understanding the environment
        var inlineScript2 = document.createTextNode('self.process.browser = true;');
        electronFixScript.appendChild(inlineScript);
        electronFixScript.appendChild(inlineScript2);
        document.body.appendChild(electronFixScript);
    };
    MonacoEditorLoaderService.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MONACO_PATH,] }] }
    ]; };
    MonacoEditorLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MonacoEditorLoaderService_Factory() { return new MonacoEditorLoaderService(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject("MONACO_PATH", 8)); }, token: MonacoEditorLoaderService, providedIn: "root" });
    MonacoEditorLoaderService = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(1, Optional()), __param(1, Inject(MONACO_PATH)),
        __metadata("design:paramtypes", [NgZone, String])
    ], MonacoEditorLoaderService);
    return MonacoEditorLoaderService;
}());
export { MonacoEditorLoaderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uYWNvLWVkaXRvci1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BtYXRlcmlhLXVpL25neC1tb25hY28tZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL21vbmFjby1lZGl0b3ItbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUc1QztJQVVJLG1DQUFvQixNQUFjLEVBQTBDLGdCQUF3QjtRQUFwRyxpQkFhQztRQWJtQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQTBDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUTtRQVJwRyxvQkFBZSxHQUE2QixJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUN4RSxnQkFBVyxHQUFHLDZCQUE2QixDQUFDO1FBUWxELElBQVUsTUFBTyxDQUFDLDhCQUE4QixFQUFFO1lBQ2hELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUEvQixDQUErQixDQUFDLENBQUM7WUFDbEQsT0FBTztTQUNSO1FBRUssTUFBTyxDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQztRQUVwRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztTQUN6QztRQUVELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBbkJELHNCQUFJLGlEQUFVO2FBQWQsVUFBZSxLQUFhO1lBQ3hCLElBQUksS0FBSyxFQUFFO2dCQUNQLElBQUks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QU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTt5Q0FBeEMsTUFBTTtPQVZ6Qix5QkFBeUIsQ0E2RXJDO29DQWxGRDtDQWtGQyxBQTdFRCxJQTZFQztTQTdFWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTU9OQUNPX1BBVEggfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBNb25hY29FZGl0b3JMb2FkZXJTZXJ2aWNlIHtcbiAgICBub2RlUmVxdWlyZTogYW55O1xuICAgIGlzTW9uYWNvTG9hZGVkJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG4gICAgcHJpdmF0ZSBfbW9uYWNvUGF0aCA9ICdhc3NldHMvbW9uYWNvLWVkaXRvci9taW4vdnMnO1xuICAgIHNldCBtb25hY29QYXRoKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9tb25hY29QYXRoID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lLCBAT3B0aW9uYWwoKSBASW5qZWN0KE1PTkFDT19QQVRIKSBwdWJsaWMgbW9uYWNvUGF0aENvbmZpZzogc3RyaW5nKSB7XG4gICAgICBpZiAoKDxhbnk+d2luZG93KS5tb25hY29FZGl0b3JBbHJlYWR5SW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgbmdab25lLnJ1bigoKSA9PiB0aGlzLmlzTW9uYWNvTG9hZGVkJC5uZXh0KHRydWUpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAoPGFueT53aW5kb3cpLm1vbmFjb0VkaXRvckFscmVhZHlJbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLm1vbmFjb1BhdGhDb25maWcpIHtcbiAgICAgICAgdGhpcy5tb25hY29QYXRoID0gdGhpcy5tb25hY29QYXRoQ29uZmlnO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvYWRNb25hY28oKTtcbiAgICB9XG5cbiAgICBsb2FkTW9uYWNvKCkge1xuICAgICAgY29uc3Qgb25Hb3RBbWRMb2FkZXIgPSAoKSA9PiB7XG5cbiAgICAgICAgbGV0IHZzUGF0aCA9IHRoaXMuX21vbmFjb1BhdGg7XG4gICAgICAgICg8YW55PndpbmRvdykuYW1kUmVxdWlyZSA9ICg8YW55PndpbmRvdykucmVxdWlyZTtcblxuICAgICAgICBjb25zdCBpc0VsZWN0cm9uID0gISF0aGlzLm5vZGVSZXF1aXJlO1xuICAgICAgICBpZiAoaXNFbGVjdHJvbikge1xuICAgICAgICAgICAgLy8gUmVzdG9yZSBub2RlIHJlcXVpcmUgaW4gd2luZG93XG4gICAgICAgICAgICAoPGFueT53aW5kb3cpLnJlcXVpcmUgPSB0aGlzLm5vZGVSZXF1aXJlO1xuXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gKDxhbnk+d2luZG93KS5yZXF1aXJlKCdwYXRoJyk7XG4gICAgICAgICAgICB2c1BhdGggPSBwYXRoLnJlc29sdmUoKDxhbnk+d2luZG93KS5fX2Rpcm5hbWUsIHRoaXMuX21vbmFjb1BhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgKDxhbnk+d2luZG93KS5hbWRSZXF1aXJlLmNvbmZpZyh7IHBhdGhzOiB7IHZzOiB2c1BhdGggfSB9KTtcblxuICAgICAgICAvLyBMb2FkIG1vbmFjb1xuICAgICAgICAoPGFueT53aW5kb3cpLmFtZFJlcXVpcmUoWyd2cy9lZGl0b3IvZWRpdG9yLm1haW4nXSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuaXNNb25hY29Mb2FkZWQkLm5leHQodHJ1ZSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gQ2hlY2sgaWYgQU1EIGxvYWRlciBhbHJlYWR5IGF2YWlsYWJsZVxuICAgIGNvbnN0IGlzQW1kTG9hZGVyQXZhaWxhYmxlID0gISEoPGFueT53aW5kb3cpLmFtZFJlcXVpcmU7XG4gICAgaWYgKGlzQW1kTG9hZGVyQXZhaWxhYmxlKSB7XG4gICAgICByZXR1cm4gb25Hb3RBbWRMb2FkZXIoKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0VsZWN0cm9uID0gISEoPGFueT53aW5kb3cpLnJlcXVpcmU7XG4gICAgICBpZiAoaXNFbGVjdHJvbikge1xuICAgICAgICB0aGlzLmFkZEVsZWN0cm9uRml4U2NyaXB0cygpO1xuICAgICAgICB0aGlzLm5vZGVSZXF1aXJlID0gKDxhbnk+d2luZG93KS5yZXF1aXJlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsb2FkZXJTY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBsb2FkZXJTY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgbG9hZGVyU2NyaXB0LnNyYyA9IGAke3RoaXMuX21vbmFjb1BhdGh9L2xvYWRlci5qc2A7XG4gICAgICBsb2FkZXJTY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uR290QW1kTG9hZGVyKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobG9hZGVyU2NyaXB0KTtcbiAgICB9XG5cbiAgICBhZGRFbGVjdHJvbkZpeFNjcmlwdHMoKSB7XG4gICAgICAgIGNvbnN0IGVsZWN0cm9uRml4U2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIC8vIHdvcmthcm91bmQgbW9uYWNvLWNzcyBub3QgdW5kZXJzdGFuZGluZyB0aGUgZW52aXJvbm1lbnRcbiAgICAgICAgY29uc3QgaW5saW5lU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ3NlbGYubW9kdWxlID0gdW5kZWZpbmVkOycpO1xuICAgICAgICAvLyB3b3JrYXJvdW5kIG1vbmFjby10eXBlc2NyaXB0IG5vdCB1bmRlcnN0YW5kaW5nIHRoZSBlbnZpcm9ubWVudFxuICAgICAgICBjb25zdCBpbmxpbmVTY3JpcHQyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ3NlbGYucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTsnKTtcbiAgICAgICAgZWxlY3Ryb25GaXhTY3JpcHQuYXBwZW5kQ2hpbGQoaW5saW5lU2NyaXB0KTtcbiAgICAgICAgZWxlY3Ryb25GaXhTY3JpcHQuYXBwZW5kQ2hpbGQoaW5saW5lU2NyaXB0Mik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlY3Ryb25GaXhTY3JpcHQpO1xuICAgIH1cbn1cbiJdfQ==