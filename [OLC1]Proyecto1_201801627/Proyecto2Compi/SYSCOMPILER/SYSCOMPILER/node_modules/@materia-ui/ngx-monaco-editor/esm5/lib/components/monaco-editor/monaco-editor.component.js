import { __assign, __decorate, __metadata, __rest } from "tslib";
import { Component, ViewChild, ElementRef, EventEmitter, Input, ChangeDetectionStrategy, forwardRef, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { filter, take } from 'rxjs/operators';
import { MonacoEditorLoaderService } from '../../services/monaco-editor-loader.service';
var MonacoEditorComponent = /** @class */ (function () {
    function MonacoEditorComponent(monacoLoader) {
        this.monacoLoader = monacoLoader;
        this.init = new EventEmitter();
        this.propagateChange = function (_) { };
    }
    MonacoEditorComponent_1 = MonacoEditorComponent;
    Object.defineProperty(MonacoEditorComponent.prototype, "model", {
        get: function () {
            return this.editor && this.editor.getModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonacoEditorComponent.prototype, "modelMarkers", {
        get: function () {
            return this.model && monaco.editor.getModelMarkers({
                resource: this.model.uri
            });
        },
        enumerable: true,
        configurable: true
    });
    MonacoEditorComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.monacoLoader.isMonacoLoaded$.pipe(filter(function (isLoaded) { return isLoaded; }), take(1)).subscribe(function () {
            _this.initEditor();
        });
    };
    MonacoEditorComponent.prototype.ngOnChanges = function (changes) {
        if (this.editor && changes.options && !changes.options.firstChange) {
            var _a = changes.options.currentValue, toLanguage = _a.language, toTheme = _a.theme, options = __rest(_a, ["language", "theme"]);
            var _b = changes.options.previousValue, fromLanguage = _b.language, fromTheme = _b.theme;
            if (fromLanguage !== toLanguage) {
                monaco.editor.setModelLanguage(this.editor.getModel(), this.options && this.options.language ? this.options.language : 'text');
            }
            if (fromTheme !== toTheme) {
                monaco.editor.setTheme(toTheme);
            }
            this.editor.updateOptions(options);
        }
        if (this.editor && changes.uri) {
            var toUri_1 = changes.uri.currentValue;
            var fromUri = changes.uri.previousValue;
            if (fromUri && !toUri_1 || !fromUri && toUri_1 || toUri_1 && fromUri && toUri_1.path !== fromUri.path) {
                var value = this.editor.getValue();
                if (this.modelUriInstance) {
                    this.modelUriInstance.dispose();
                }
                var existingModel = void 0;
                if (toUri_1) {
                    existingModel = monaco.editor.getModels().find(function (model) { return model.uri.path === toUri_1.path; });
                }
                this.modelUriInstance = existingModel ? existingModel : monaco.editor.createModel(value, this.options.language || 'text', this.uri);
                this.editor.setModel(this.modelUriInstance);
            }
        }
    };
    MonacoEditorComponent.prototype.writeValue = function (value) {
        this.value = value;
        if (this.editor && value) {
            this.editor.setValue(value);
        }
        else if (this.editor) {
            this.editor.setValue('');
        }
    };
    MonacoEditorComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    MonacoEditorComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    MonacoEditorComponent.prototype.validate = function () {
        return !this.parsedError ? null : {
            monaco: {
                value: this.parsedError.split('|'),
            }
        };
    };
    MonacoEditorComponent.prototype.registerOnValidatorChange = function (fn) {
        this.onErrorStatusChange = fn;
    };
    MonacoEditorComponent.prototype.initEditor = function () {
        var options = {
            value: [this.value].join('\n'),
            language: 'text',
            automaticLayout: true,
            scrollBeyondLastLine: false,
            theme: 'vc'
        };
        this.editor = monaco.editor.create(this.editorContent.nativeElement, this.options ? __assign(__assign({}, options), this.options) : options);
        this.registerEditorListeners();
        this.init.emit(this.editor);
    };
    MonacoEditorComponent.prototype.registerEditorListeners = function () {
        var _this = this;
        this.editor.onDidChangeModelContent(function () {
            _this.propagateChange(_this.editor.getValue());
        });
        this.editor.onDidChangeModelDecorations(function () {
            var currentParsedError = _this.modelMarkers.map(function (_a) {
                var message = _a.message;
                return message;
            }).join('|');
            var hasValidationStatusChanged = _this.parsedError !== currentParsedError;
            if (hasValidationStatusChanged) {
                _this.parsedError = currentParsedError;
                _this.onErrorStatusChange();
            }
        });
        this.editor.onDidBlurEditorText(function () {
            _this.onTouched();
        });
    };
    MonacoEditorComponent.prototype.ngOnDestroy = function () {
        if (this.editor) {
            this.editor.dispose();
        }
    };
    var MonacoEditorComponent_1;
    MonacoEditorComponent.ctorParameters = function () { return [
        { type: MonacoEditorLoaderService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MonacoEditorComponent.prototype, "options", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MonacoEditorComponent.prototype, "uri", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MonacoEditorComponent.prototype, "init", void 0);
    __decorate([
        ViewChild('editor', { static: true }),
        __metadata("design:type", ElementRef)
    ], MonacoEditorComponent.prototype, "editorContent", void 0);
    MonacoEditorComponent = MonacoEditorComponent_1 = __decorate([
        Component({
            selector: 'ngx-monaco-editor',
            template: "<div #container class=\"editor-container\" fxFlex>\n\t\t<div\n\t\t\t#editor\n\t\t\tclass=\"monaco-editor\"\n\t\t></div>\n</div>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return MonacoEditorComponent_1; }),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return MonacoEditorComponent_1; }),
                    multi: true,
                }
            ],
            styles: ["\n.monaco-editor {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n}\n.editor-container {\n\toverflow: hidden;\n\tposition: relative;\n\tdisplay: table;\n\twidth: 100%;\n  height: 100%;\n  min-width: 0;\n}"]
        }),
        __metadata("design:paramtypes", [MonacoEditorLoaderService])
    ], MonacoEditorComponent);
    return MonacoEditorComponent;
}());
export { MonacoEditorComponent };
//# sourceMappingURL=data:application/json;base64,