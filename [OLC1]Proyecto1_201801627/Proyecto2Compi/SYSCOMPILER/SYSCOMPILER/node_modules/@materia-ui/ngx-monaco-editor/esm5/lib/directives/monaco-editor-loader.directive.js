import { __decorate, __metadata } from "tslib";
import { Directive, TemplateRef, ViewContainerRef, OnDestroy, OnInit } from '@angular/core';
import { MonacoEditorLoaderService } from '../services/monaco-editor-loader.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
var MonacoEditorLoaderDirective = /** @class */ (function () {
    function MonacoEditorLoaderDirective(templateRef, viewContainer, monacoEditorLoaderService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.monacoEditorLoaderService = monacoEditorLoaderService;
        this.isMonacoLoaded$ = this.monacoEditorLoaderService.isMonacoLoaded$.asObservable();
        this.destroyed$ = new Subject();
    }
    MonacoEditorLoaderDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.isMonacoLoaded$.pipe(takeUntil(this.destroyed$)).subscribe(function (loaded) {
            if (!loaded) {
                return _this.viewContainer.clear();
            }
            _this.viewContainer.createEmbeddedView(_this.templateRef);
        });
    };
    MonacoEditorLoaderDirective.prototype.ngOnDestroy = function () {
        this.destroyed$.next();
        this.destroyed$.complete();
    };
    MonacoEditorLoaderDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: MonacoEditorLoaderService }
    ]; };
    MonacoEditorLoaderDirective = __decorate([
        Directive({ selector: '[ngxLoadMonacoEditor]' }),
        __metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            MonacoEditorLoaderService])
    ], MonacoEditorLoaderDirective);
    return MonacoEditorLoaderDirective;
}());
export { MonacoEditorLoaderDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uYWNvLWVkaXRvci1sb2FkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG1hdGVyaWEtdWkvbmd4LW1vbmFjby1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9tb25hY28tZWRpdG9yLWxvYWRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDckYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHL0I7SUFJRSxxQ0FDVSxXQUE2QixFQUM3QixhQUErQixFQUMvQix5QkFBb0Q7UUFGcEQsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQiw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBTjlELG9CQUFlLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNoRixlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQU05QixDQUFDO0lBRUosOENBQVEsR0FBUjtRQUFBLGlCQU9DO1FBTkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU07WUFDckUsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCxPQUFPLEtBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDbkM7WUFDRCxLQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxpREFBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUM7O2dCQWpCc0IsV0FBVztnQkFDVCxnQkFBZ0I7Z0JBQ0oseUJBQXlCOztJQVBuRCwyQkFBMkI7UUFEdkMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFLENBQUM7eUNBTXhCLFdBQVc7WUFDVCxnQkFBZ0I7WUFDSix5QkFBeUI7T0FQbkQsMkJBQTJCLENBdUJ2QztJQUFELGtDQUFDO0NBQUEsQUF2QkQsSUF1QkM7U0F2QlksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1vbmFjb0VkaXRvckxvYWRlclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9tb25hY28tZWRpdG9yLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW25neExvYWRNb25hY29FZGl0b3JdJyB9KVxuZXhwb3J0IGNsYXNzIE1vbmFjb0VkaXRvckxvYWRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgaXNNb25hY29Mb2FkZWQkID0gdGhpcy5tb25hY29FZGl0b3JMb2FkZXJTZXJ2aWNlLmlzTW9uYWNvTG9hZGVkJC5hc09ic2VydmFibGUoKTtcbiAgZGVzdHJveWVkJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBtb25hY29FZGl0b3JMb2FkZXJTZXJ2aWNlOiBNb25hY29FZGl0b3JMb2FkZXJTZXJ2aWNlXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmlzTW9uYWNvTG9hZGVkJC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCQpKS5zdWJzY3JpYmUoKGxvYWRlZCkgPT4ge1xuICAgICAgaWYgKCFsb2FkZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgfVxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveWVkJC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95ZWQkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==