import { __decorate, __metadata } from "tslib";
import { Component, ViewChild, ElementRef, EventEmitter, Output, Input, ChangeDetectionStrategy } from '@angular/core';
import { filter, take } from 'rxjs/operators';
import { MonacoEditorLoaderService } from '../../services/monaco-editor-loader.service';
var MonacoDiffEditorComponent = /** @class */ (function () {
    function MonacoDiffEditorComponent(monacoLoader) {
        this.monacoLoader = monacoLoader;
        this.init = new EventEmitter();
    }
    MonacoDiffEditorComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.container = this.editorContent.nativeElement;
        this.monacoLoader.isMonacoLoaded$.pipe(filter(function (isLoaded) { return isLoaded; }), take(1)).subscribe(function () {
            _this.initMonaco();
        });
    };
    MonacoDiffEditorComponent.prototype.ngOnChanges = function (changes) {
        if (this.editor && ((changes.code && !changes.code.firstChange) || (changes.modified && !changes.modified.firstChange))) {
            var modified = monaco.editor.createModel(this.modified);
            var original = monaco.editor.createModel(this.original);
            this.editor.setModel({
                original: original,
                modified: modified
            });
        }
        if (this.editor &&
            changes.options &&
            !changes.options.firstChange) {
            if (changes.options.previousValue.theme !== changes.options.currentValue.theme) {
                monaco.editor.setTheme(changes.options.currentValue.theme);
            }
            this.editor.updateOptions(changes.options.currentValue);
        }
    };
    MonacoDiffEditorComponent.prototype.initMonaco = function () {
        var opts = {
            readOnly: true,
            automaticLayout: true,
            theme: 'vc'
        };
        if (this.options) {
            opts = Object.assign({}, opts, this.options);
        }
        this.editor = monaco.editor.createDiffEditor(this.container, opts);
        var original = monaco.editor.createModel(this.original);
        var modified = monaco.editor.createModel(this.modified);
        this.editor.setModel({
            original: original,
            modified: modified
        });
        this.editor.layout();
        this.init.emit(this.editor);
    };
    MonacoDiffEditorComponent.prototype.ngOnDestroy = function () {
        if (this.editor) {
            this.editor.dispose();
        }
    };
    MonacoDiffEditorComponent.ctorParameters = function () { return [
        { type: MonacoEditorLoaderService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MonacoDiffEditorComponent.prototype, "original", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MonacoDiffEditorComponent.prototype, "modified", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MonacoDiffEditorComponent.prototype, "options", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MonacoDiffEditorComponent.prototype, "init", void 0);
    __decorate([
        ViewChild('diffEditor', { static: true }),
        __metadata("design:type", ElementRef)
    ], MonacoDiffEditorComponent.prototype, "editorContent", void 0);
    MonacoDiffEditorComponent = __decorate([
        Component({
            selector: 'ngx-monaco-diff-editor',
            template: "<div #container class=\"editor-container\" fxFlex>\n\t\t<div\n\t\t\t#diffEditor\n\t\t\tclass=\"monaco-editor\"\n\t\t></div>\n</div>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: ["\n.monaco-editor {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n}\n.editor-container {\n\toverflow: hidden;\n\tposition: relative;\n\tdisplay: table;\n\twidth: 100%;\n  height: 100%;\n  min-width: 0;\n}"]
        }),
        __metadata("design:paramtypes", [MonacoEditorLoaderService])
    ], MonacoDiffEditorComponent);
    return MonacoDiffEditorComponent;
}());
export { MonacoDiffEditorComponent };
//# sourceMappingURL=data:application/json;base64,