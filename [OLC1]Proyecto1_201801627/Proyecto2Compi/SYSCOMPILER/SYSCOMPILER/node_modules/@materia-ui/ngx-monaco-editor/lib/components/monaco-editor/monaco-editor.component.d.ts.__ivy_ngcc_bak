import { ElementRef, EventEmitter, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, Validator, ValidationErrors } from '@angular/forms';
import { MonacoEditorLoaderService } from '../../services/monaco-editor-loader.service';
import { MonacoEditorConstructionOptions, MonacoEditorUri, MonacoStandaloneCodeEditor } from '../../interfaces';
export declare class MonacoEditorComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor, Validator {
    private monacoLoader;
    options: MonacoEditorConstructionOptions;
    uri?: MonacoEditorUri;
    init: EventEmitter<MonacoStandaloneCodeEditor>;
    editorContent: ElementRef;
    editor: MonacoStandaloneCodeEditor;
    modelUriInstance: monaco.editor.ITextModel;
    value: string;
    parsedError: string;
    private onTouched;
    private onErrorStatusChange;
    private propagateChange;
    get model(): monaco.editor.ITextModel;
    get modelMarkers(): monaco.editor.IMarker[];
    constructor(monacoLoader: MonacoEditorLoaderService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    validate(): ValidationErrors;
    registerOnValidatorChange?(fn: () => void): void;
    private initEditor;
    registerEditorListeners(): void;
    ngOnDestroy(): void;
}
