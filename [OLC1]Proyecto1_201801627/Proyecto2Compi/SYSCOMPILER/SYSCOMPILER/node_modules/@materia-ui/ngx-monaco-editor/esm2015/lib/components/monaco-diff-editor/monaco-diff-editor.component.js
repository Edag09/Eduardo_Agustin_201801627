import { __decorate, __metadata } from "tslib";
import { Component, ViewChild, ElementRef, EventEmitter, Output, Input, ChangeDetectionStrategy } from '@angular/core';
import { filter, take } from 'rxjs/operators';
import { MonacoEditorLoaderService } from '../../services/monaco-editor-loader.service';
let MonacoDiffEditorComponent = class MonacoDiffEditorComponent {
    constructor(monacoLoader) {
        this.monacoLoader = monacoLoader;
        this.init = new EventEmitter();
    }
    ngOnInit() {
        this.container = this.editorContent.nativeElement;
        this.monacoLoader.isMonacoLoaded$.pipe(filter(isLoaded => isLoaded), take(1)).subscribe(() => {
            this.initMonaco();
        });
    }
    ngOnChanges(changes) {
        if (this.editor && ((changes.code && !changes.code.firstChange) || (changes.modified && !changes.modified.firstChange))) {
            const modified = monaco.editor.createModel(this.modified);
            const original = monaco.editor.createModel(this.original);
            this.editor.setModel({
                original,
                modified
            });
        }
        if (this.editor &&
            changes.options &&
            !changes.options.firstChange) {
            if (changes.options.previousValue.theme !== changes.options.currentValue.theme) {
                monaco.editor.setTheme(changes.options.currentValue.theme);
            }
            this.editor.updateOptions(changes.options.currentValue);
        }
    }
    initMonaco() {
        let opts = {
            readOnly: true,
            automaticLayout: true,
            theme: 'vc'
        };
        if (this.options) {
            opts = Object.assign({}, opts, this.options);
        }
        this.editor = monaco.editor.createDiffEditor(this.container, opts);
        const original = monaco.editor.createModel(this.original);
        const modified = monaco.editor.createModel(this.modified);
        this.editor.setModel({
            original,
            modified
        });
        this.editor.layout();
        this.init.emit(this.editor);
    }
    ngOnDestroy() {
        if (this.editor) {
            this.editor.dispose();
        }
    }
};
MonacoDiffEditorComponent.ctorParameters = () => [
    { type: MonacoEditorLoaderService }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], MonacoDiffEditorComponent.prototype, "original", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MonacoDiffEditorComponent.prototype, "modified", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MonacoDiffEditorComponent.prototype, "options", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MonacoDiffEditorComponent.prototype, "init", void 0);
__decorate([
    ViewChild('diffEditor', { static: true }),
    __metadata("design:type", ElementRef)
], MonacoDiffEditorComponent.prototype, "editorContent", void 0);
MonacoDiffEditorComponent = __decorate([
    Component({
        selector: 'ngx-monaco-diff-editor',
        template: `<div #container class="editor-container" fxFlex>
		<div
			#diffEditor
			class="monaco-editor"
		></div>
</div>`,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [`
.monaco-editor {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;

}
.editor-container {
	overflow: hidden;
	position: relative;
	display: table;
	width: 100%;
  height: 100%;
  min-width: 0;
}`]
    }),
    __metadata("design:paramtypes", [MonacoEditorLoaderService])
], MonacoDiffEditorComponent);
export { MonacoDiffEditorComponent };
//# sourceMappingURL=data:application/json;base64,