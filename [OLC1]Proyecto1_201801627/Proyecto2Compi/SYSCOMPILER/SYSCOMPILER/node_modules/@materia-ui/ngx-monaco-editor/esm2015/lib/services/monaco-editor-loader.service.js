import { __decorate, __metadata, __param } from "tslib";
import { Injectable, NgZone, Optional, Inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { MONACO_PATH } from '../interfaces';
import * as i0 from "@angular/core";
let MonacoEditorLoaderService = class MonacoEditorLoaderService {
    constructor(ngZone, monacoPathConfig) {
        this.ngZone = ngZone;
        this.monacoPathConfig = monacoPathConfig;
        this.isMonacoLoaded$ = new BehaviorSubject(false);
        this._monacoPath = 'assets/monaco-editor/min/vs';
        if (window.monacoEditorAlreadyInitialized) {
            ngZone.run(() => this.isMonacoLoaded$.next(true));
            return;
        }
        window.monacoEditorAlreadyInitialized = true;
        if (this.monacoPathConfig) {
            this.monacoPath = this.monacoPathConfig;
        }
        this.loadMonaco();
    }
    set monacoPath(value) {
        if (value) {
            this._monacoPath = value;
        }
    }
    loadMonaco() {
        const onGotAmdLoader = () => {
            let vsPath = this._monacoPath;
            window.amdRequire = window.require;
            const isElectron = !!this.nodeRequire;
            if (isElectron) {
                // Restore node require in window
                window.require = this.nodeRequire;
                const path = window.require('path');
                vsPath = path.resolve(window.__dirname, this._monacoPath);
            }
            window.amdRequire.config({ paths: { vs: vsPath } });
            // Load monaco
            window.amdRequire(['vs/editor/editor.main'], () => {
                this.ngZone.run(() => this.isMonacoLoaded$.next(true));
            });
        };
        // Check if AMD loader already available
        const isAmdLoaderAvailable = !!window.amdRequire;
        if (isAmdLoaderAvailable) {
            return onGotAmdLoader();
        }
        const isElectron = !!window.require;
        if (isElectron) {
            this.addElectronFixScripts();
            this.nodeRequire = window.require;
        }
        const loaderScript = document.createElement('script');
        loaderScript.type = 'text/javascript';
        loaderScript.src = `${this._monacoPath}/loader.js`;
        loaderScript.addEventListener('load', onGotAmdLoader);
        document.body.appendChild(loaderScript);
    }
    addElectronFixScripts() {
        const electronFixScript = document.createElement('script');
        // workaround monaco-css not understanding the environment
        const inlineScript = document.createTextNode('self.module = undefined;');
        // workaround monaco-typescript not understanding the environment
        const inlineScript2 = document.createTextNode('self.process.browser = true;');
        electronFixScript.appendChild(inlineScript);
        electronFixScript.appendChild(inlineScript2);
        document.body.appendChild(electronFixScript);
    }
};
MonacoEditorLoaderService.ctorParameters = () => [
    { type: NgZone },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MONACO_PATH,] }] }
];
MonacoEditorLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MonacoEditorLoaderService_Factory() { return new MonacoEditorLoaderService(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject("MONACO_PATH", 8)); }, token: MonacoEditorLoaderService, providedIn: "root" });
MonacoEditorLoaderService = __decorate([
    Injectable({ providedIn: 'root' }),
    __param(1, Optional()), __param(1, Inject(MONACO_PATH)),
    __metadata("design:paramtypes", [NgZone, String])
], MonacoEditorLoaderService);
export { MonacoEditorLoaderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uYWNvLWVkaXRvci1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BtYXRlcmlhLXVpL25neC1tb25hY28tZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL21vbmFjby1lZGl0b3ItbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUc1QyxJQUFhLHlCQUF5QixHQUF0QyxNQUFhLHlCQUF5QjtJQVVsQyxZQUFvQixNQUFjLEVBQTBDLGdCQUF3QjtRQUFoRixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQTBDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUTtRQVJwRyxvQkFBZSxHQUE2QixJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUN4RSxnQkFBVyxHQUFHLDZCQUE2QixDQUFDO1FBUWxELElBQVUsTUFBTyxDQUFDLDhCQUE4QixFQUFFO1lBQ2hELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNsRCxPQUFPO1NBQ1I7UUFFSyxNQUFPLENBQUMsOEJBQThCLEdBQUcsSUFBSSxDQUFDO1FBRXBELElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1NBQ3pDO1FBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFuQkQsSUFBSSxVQUFVLENBQUMsS0FBYTtRQUN4QixJQUFJLEtBQUssRUFBRTtZQUNQLElB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TSxDQUFDLFdBQVcsQ0FBQyxDQUFBO3FDQUF4QyxNQUFNO0dBVnpCLHlCQUF5QixDQTZFckM7U0E3RVkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lLCBPcHRpb25hbCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE1PTkFDT19QQVRIIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTW9uYWNvRWRpdG9yTG9hZGVyU2VydmljZSB7XG4gICAgbm9kZVJlcXVpcmU6IGFueTtcbiAgICBpc01vbmFjb0xvYWRlZCQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIHByaXZhdGUgX21vbmFjb1BhdGggPSAnYXNzZXRzL21vbmFjby1lZGl0b3IvbWluL3ZzJztcbiAgICBzZXQgbW9uYWNvUGF0aCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9uYWNvUGF0aCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSwgQE9wdGlvbmFsKCkgQEluamVjdChNT05BQ09fUEFUSCkgcHVibGljIG1vbmFjb1BhdGhDb25maWc6IHN0cmluZykge1xuICAgICAgaWYgKCg8YW55PndpbmRvdykubW9uYWNvRWRpdG9yQWxyZWFkeUluaXRpYWxpemVkKSB7XG4gICAgICAgIG5nWm9uZS5ydW4oKCkgPT4gdGhpcy5pc01vbmFjb0xvYWRlZCQubmV4dCh0cnVlKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgKDxhbnk+d2luZG93KS5tb25hY29FZGl0b3JBbHJlYWR5SW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy5tb25hY29QYXRoQ29uZmlnKSB7XG4gICAgICAgIHRoaXMubW9uYWNvUGF0aCA9IHRoaXMubW9uYWNvUGF0aENvbmZpZztcbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2FkTW9uYWNvKCk7XG4gICAgfVxuXG4gICAgbG9hZE1vbmFjbygpIHtcbiAgICAgIGNvbnN0IG9uR290QW1kTG9hZGVyID0gKCkgPT4ge1xuXG4gICAgICAgIGxldCB2c1BhdGggPSB0aGlzLl9tb25hY29QYXRoO1xuICAgICAgICAoPGFueT53aW5kb3cpLmFtZFJlcXVpcmUgPSAoPGFueT53aW5kb3cpLnJlcXVpcmU7XG5cbiAgICAgICAgY29uc3QgaXNFbGVjdHJvbiA9ICEhdGhpcy5ub2RlUmVxdWlyZTtcbiAgICAgICAgaWYgKGlzRWxlY3Ryb24pIHtcbiAgICAgICAgICAgIC8vIFJlc3RvcmUgbm9kZSByZXF1aXJlIGluIHdpbmRvd1xuICAgICAgICAgICAgKDxhbnk+d2luZG93KS5yZXF1aXJlID0gdGhpcy5ub2RlUmVxdWlyZTtcblxuICAgICAgICAgICAgY29uc3QgcGF0aCA9ICg8YW55PndpbmRvdykucmVxdWlyZSgncGF0aCcpO1xuICAgICAgICAgICAgdnNQYXRoID0gcGF0aC5yZXNvbHZlKCg8YW55PndpbmRvdykuX19kaXJuYW1lLCB0aGlzLl9tb25hY29QYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgICg8YW55PndpbmRvdykuYW1kUmVxdWlyZS5jb25maWcoeyBwYXRoczogeyB2czogdnNQYXRoIH0gfSk7XG5cbiAgICAgICAgLy8gTG9hZCBtb25hY29cbiAgICAgICAgKDxhbnk+d2luZG93KS5hbWRSZXF1aXJlKFsndnMvZWRpdG9yL2VkaXRvci5tYWluJ10sICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmlzTW9uYWNvTG9hZGVkJC5uZXh0KHRydWUpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIENoZWNrIGlmIEFNRCBsb2FkZXIgYWxyZWFkeSBhdmFpbGFibGVcbiAgICBjb25zdCBpc0FtZExvYWRlckF2YWlsYWJsZSA9ICEhKDxhbnk+d2luZG93KS5hbWRSZXF1aXJlO1xuICAgIGlmIChpc0FtZExvYWRlckF2YWlsYWJsZSkge1xuICAgICAgcmV0dXJuIG9uR290QW1kTG9hZGVyKCk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNFbGVjdHJvbiA9ICEhKDxhbnk+d2luZG93KS5yZXF1aXJlO1xuICAgICAgaWYgKGlzRWxlY3Ryb24pIHtcbiAgICAgICAgdGhpcy5hZGRFbGVjdHJvbkZpeFNjcmlwdHMoKTtcbiAgICAgICAgdGhpcy5ub2RlUmVxdWlyZSA9ICg8YW55PndpbmRvdykucmVxdWlyZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbG9hZGVyU2NyaXB0OiBIVE1MU2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgbG9hZGVyU2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgIGxvYWRlclNjcmlwdC5zcmMgPSBgJHt0aGlzLl9tb25hY29QYXRofS9sb2FkZXIuanNgO1xuICAgICAgbG9hZGVyU2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkdvdEFtZExvYWRlcik7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxvYWRlclNjcmlwdCk7XG4gICAgfVxuXG4gICAgYWRkRWxlY3Ryb25GaXhTY3JpcHRzKCkge1xuICAgICAgICBjb25zdCBlbGVjdHJvbkZpeFNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAvLyB3b3JrYXJvdW5kIG1vbmFjby1jc3Mgbm90IHVuZGVyc3RhbmRpbmcgdGhlIGVudmlyb25tZW50XG4gICAgICAgIGNvbnN0IGlubGluZVNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdzZWxmLm1vZHVsZSA9IHVuZGVmaW5lZDsnKTtcbiAgICAgICAgLy8gd29ya2Fyb3VuZCBtb25hY28tdHlwZXNjcmlwdCBub3QgdW5kZXJzdGFuZGluZyB0aGUgZW52aXJvbm1lbnRcbiAgICAgICAgY29uc3QgaW5saW5lU2NyaXB0MiA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdzZWxmLnByb2Nlc3MuYnJvd3NlciA9IHRydWU7Jyk7XG4gICAgICAgIGVsZWN0cm9uRml4U2NyaXB0LmFwcGVuZENoaWxkKGlubGluZVNjcmlwdCk7XG4gICAgICAgIGVsZWN0cm9uRml4U2NyaXB0LmFwcGVuZENoaWxkKGlubGluZVNjcmlwdDIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZWN0cm9uRml4U2NyaXB0KTtcbiAgICB9XG59XG4iXX0=